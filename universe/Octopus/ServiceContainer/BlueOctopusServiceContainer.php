<?php

namespace Octopus\ServiceContainer;


use Octopus\Exception\OctopusServiceErrorException;
use SicTools\HotServiceResolver;
use SicTools\SicTool;

/**
 *
 *
 * The BlueOctopusServiceContainer represents a blue octopus.
 *
 *
 * A blue octopus is composed of two classes acting together as a cold (aka static) service container.
 *
 * The two parts are the following:
 *
 * - light part (this class): this is the parent class, which contains the "get" method implementing the OctopusServiceContainerInterface.
 * - dark part (a class to be generated): this is the child class, which contains all the methods (one method per service).
 *
 *
 * The dark part can be generated by a class like the Octopus\ServiceContainerBuilder\DarkBlueOctopusServiceContainerBuilder for instance.
 *
 *
 *
 * //--------------------------------------------
 * SYNOPSIS
 * //--------------------------------------------
 * So here is a schematic representation of how it works:
 *
 *
 * // preparation
 * - LightClass (this class)
 *      - get (service)
 *
 * - DarkClass extends LightClass
 *      - service1 ()
 *          return new Service1();
 *      - service2 ()
 *          return new Service2();
 *
 *
 * // client code
 * serviceContainer = new DarkClass()
 * serviceContainer->get(service1)
 *
 *
 *
 */
class BlueOctopusServiceContainer implements OctopusServiceContainerInterface
{


    /**
     * This property holds the cached instances of this service container.
     *
     * @var array
     */
    private $cachedInstances;


    /**
     * Builds the service container.
     *
     * BlueOctopusServiceContainer constructor.
     */
    public function __construct()
    {
        $this->cachedInstances = [];
    }

    /**
     * @implementation
     */
    public function get($service)
    {

        // cache available?
        if (array_key_exists($service, $this->cachedInstances)) {
            return $this->cachedInstances[$service];
        }


        $methodName = self::getMethodName($service);
        if (is_callable(get_called_class(), $methodName)) {
            try {
                $instance = $this->$methodName();
                $this->cachedInstances[$service] = $instance;
                return $instance;
            } catch (\Exception $e) {
                throw new OctopusServiceErrorException($e->getMessage(), 0, $e);
            }
        } else {
            throw new OctopusServiceErrorException("Service not found: $service");
        }
    }


    /**
     * Converts the given service name into a method name (the name of the method in charge of returning the service).
     *
     *
     *
     * @param $serviceName
     * @return string
     */
    public static function getMethodName($serviceName)
    {
        return strtolower(str_replace('.', '_', $serviceName));
    }
}