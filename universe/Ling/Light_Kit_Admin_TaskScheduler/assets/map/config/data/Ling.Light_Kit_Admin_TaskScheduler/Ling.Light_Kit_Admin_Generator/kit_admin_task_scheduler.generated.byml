# --------------------------------------
# YOUR TYPICAL PLUGIN CONFIGURATION
# --------------------------------------
# just configure the variables section, should work fine for most cases
# --------------------------------------
variables:
    plugin: Light_Kit_Admin_TaskScheduler
    menuName: Task Scheduler
    galaxyName: Ling
    shortName: kit_admin_task_scheduler
    prefix: lts
    tables:
        - lts_task_schedule

    createFile: {app_dir}/universe/Ling/Light_TaskScheduler/assets/fixtures/create-structure.sql



# The plugin name is used in various places, including:
# - as a prefix of the rendering.list_general_actions.action_id (list)
# - as a prefix of the rendering.list_action_groups.action_id (list)
# - as the plugin name in rendering.list_renderer.identifier (list)
# - as the plugin name in plugin (described in the miscellaneous "section" of the realist conception notes)
plugin_name: !{plugin}



# The path to a create file, see the use_create_file directive for more info
# The {app_dir} tag will be replaced with the absolute path to the application directory.
create_file: !{createFile}

# Whether or not to use the "create file" defined with the create_file directive.
# If true, the generators will use the info from the create file to do their things.
# If false, the generators will use the info from the actual database instead.
# Learn more about create file here: https://github.com/lingtalfi/TheBar/blob/master/discussions/create-file.md
# default value is false
use_create_file: true


# This section defines the table to generate configuration files for.
# It's composed of two sections: add and remove.
tables:
    # In the add section, you specify the tables you want to add.
    # This entry accepts either a string (for just one table) or an array.
    # The special value "*" (asterisk) represent all tables.
    add: !{tables}
#        add: *
    # In the remove section, you specify the tables you want to remove (i.e. the tables
    # for which you don't want to generate a configuration file).
    # This entry accepts either a string (for just one table) or an array.
    # The default value is an empty array.
    ?remove: []
        - luda_resource

# This section defines the table prefixes.
# A prefix is an arbitrary string in front of the table name, and followed by an underscore.
# It's like a namespace for tables if you will.
# The prefixes, or the table name without prefix are information that might be used by other parts of this generator.
table_prefixes:
    - !{prefix}

# Array. Optional. Defaults to the example below. Defines a has table detection mechanism that can be used by the other
# sections of this file.
has_tables:
    # Array. Optional. Defaults to an array containing one entry with value="has".
    # This array defines which values trigger the detection of a has table.
    # The detection of a has table is triggered if the expression composed of the keyword surrounded with underscores
    # is contained in the table name.
    keywords:
        - has


# This array let you ignore/skip columns that you want to exclude from both the list and form generated config files.
# It's an array of table => columnNames, with columnNames being an array of column names.
?ignore_columns: []
#        lud_user:
#            - password


# Bool=true. Whether to generate lists
use_list: true

# Bool=true. Whether to generate forms
use_form: true

# Bool=true. Whether to generate menus
use_menu: true

# Bool=true. Whether to generate controllers
use_controller: true



# This section defines the behaviour of the list configuration file generator.
# The term generic tags, used in some of the definitions below, refers to the following array:
# - {label}, the human name derived from the table name (using internal heuristics)
# - {Label}, same as label, but with first letter uppercase
# - {table}, the table name
# - {TableClass}, the table name in pascal case (i.e. class name case).
#       More info about pascal case here: https://github.com/lingtalfi/ConventionGuy/blob/master/nomenclature.stringCases.eng.md#pascalcase
list:


    # The name of the plugin who handles the list actions. By default, it's the plugin name defined with the
    # plugin_name option (at the root level of this file).
    list_action_groups_plugin_name: Light_Kit_Admin

    # The name of the plugin who handles the list general actions. By default, it's the plugin name defined with the
    # plugin_name option (at the root level of this file).
    list_general_actions_plugin_name: Light_Kit_Admin

    # The target_dir is the path of the dir where to generate the files
    # It's an absolute path.
    # The tag {app_dir} can be used, and will be replaced with the actual "application root directory".
    target_dir: {app_dir}/config/data/!{galaxyName}.!{plugin}/Ling.Light_Realist/list/generated

    # The title of the list, defaults to:
    # - {Label} list
    # The generic tags (see the list description comment) can be used to replace some part of the title by
    # dynamic values.
    title: {Label} list

    # When executing the stmt request and there is an error: whether to show the query/markers information along with the
    # error message (true), or just display the error message (false, by default)
    query_error_show_debug_info: true




    # Whether to use the cross columns on foreign keys
    # See more about cross columns in https://github.com/lingtalfi/Light_Realist/blob/master/doc/pages/crossed-column.md
    use_cross_columns: true

    # A string representing how to display the foreign key in the cross column.
    # Only used if use_cross_columns=true.
    # The following tags are available:
    # - $fk: the name of the foreign key column (prefix with an alias)
    # - $rc: the name of the representative column (prefixed with an alias)
    # The default value is
    # - concat($fk, '. ', $rc)
    cross_column_fk_format: concat($fk, '. ', $rc)

    # A string used to generate the value of a parameter for the Light_Realist.hub_link column transformer,
    # which is a built-in transformer provided by Light_Realist.
    # This is used to create a link out of the cross column.
    #
    # See more about the column transformer in: https://github.com/lingtalfi/Light_Realist/blob/master/doc/pages/realist-conception-notes.md#types-the-column-transformers
    # See more about the cross columns in: https://github.com/lingtalfi/Light_Realist/blob/master/doc/pages/crossed-column.md
    #
    # In particular, the url_params.controller value is generated from this option.
    # See the BaseRealistRowsRenderer implementation for more details: https://github.com/lingtalfi/Light_Realist/blob/master/doc/api/Ling/Light_Realist/Rendering/BaseRealistRowsRenderer.md
    # The following tags are available:
    # - {Table}: the referenced table name is pascal case (https://github.com/lingtalfi/ConventionGuy/blob/master/nomenclature.stringCases.eng.md#pascalcase).
    # The default value is:
    # - Generated/{Table}Controller
    #
    cross_column_hub_link_controller_format: Generated/{Table}Controller

    # An array of tablePrefix => pluginName, used to generate the plugin parameter of the in the built-in Light_Realist.hub_link column transformer for cross columns.
    # By default it's an empty array.
    cross_column_hub_link_table_prefix_2_plugin: []
#            lud: !{plugin}



    # An array of common representative column names.
    # Only used if use_cross_columns=true.
    # The default value is an array containing the following:
    # - name
    # - label
    # - identifier
    # If you define this array, it overrides the value entirely (i.e. it's not merged with the default values, but
    # will rather replace them).
    # More info about representatives in https://github.com/lingtalfi/Light_RealGenerator/blob/master/doc/pages/conception-notes.md#the-representative-column
    common_representative_matches:
        - pseudo


    # Whether to use the action column (added to every row). Defaults to true.
    ?use_action_column: true


    # The name of the action column (only if use_action_column=true). Defaults to "action".
    # Tip: the default value is set by the LightRealistService->executeRequestById method.
    ?column_action_name: action

    # The label for the action column (only if use_action_column=true). Defaults to "Actions".
    ?column_action_label: Actions


    # Whether to use the checkbox column (added to every row). Defaults to true.
    ?use_checkbox_column: true

    # The name of the checkbox column (only if use_checkbox_column=true). Defaults to "checkbox".
    # Tip: the default value is set by the LightRealistService->executeRequestById method.
    ?column_checkbox_name: checkbox

    # The label for the checkbox column (only if use_checkbox_column=true). Defaults to "Checkbox".
    ?column_checkbox_label: Checkbox

    # The name of the class to use as the action handler.
    # The default value is: Ling\Light_Kit_Admin\Realist\ListActionHandler\LightKitAdminListActionHandler
    action_handler_class: Ling\Light_Kit_Admin\Realist\ListActionHandler\LightKitAdminListActionHandler

    # The name of the class to use as the list renderer.
    # The default value is: Ling\Light_Kit_Admin\Realist\Rendering\LightKitAdminRealistListRenderer
    list_renderer_class: Ling\Light_Kit_Admin\Realist\Rendering\LightKitAdminRealistListRenderer



    # This array let you ignore/skip columns that you want to exclude from the generated list config file.
    # It's an array of table => columnNames, with columnNames being an array of column names.
    # Note: it merges with the ignore_columns option set at the root level (if set).
    ?ignore_columns:
        lud_user:
            - password
    # This array let you override the default column types.
    # It's an array of table => types, with types being an array of columnName => type.
    # With type being an open admin table data type (https://github.com/lingtalfi/Light_Realist/blob/master/doc/pages/open-admin-table-protocol.md#the-data-types).
    # This is used to generate the rendering.open_admin_table.data_types setting in the config file.
    #
    ?open_admin_table_column_types:
        lud_user:
            pseudo: enum
    # This array let you override the default column labels.
    # It's an array of table => labels, with labels being an array of columnName => label.
    # Note: for the special columns checkbox and action, the labels are set with column_action_label and column_checkbox_label.
    #
    ?column_labels:
        lud_user:
            pseudo: The pseudo

    # Overrides the rows_renderer.identifier default value, which is null.
    ?rows_renderer_identifier: null

    # Defines the rows_renderer.class value. If you define this key, it will have precedence
    # over the rows_renderer_identifier option. The default value is Ling\Light_Kit_Admin\Realist\Rendering\LightKitAdminRealistListItemRenderer,
    # because that's the one I use the most
    ?rows_renderer_class: Ling\Light_Kit_Admin\Realist\Rendering\LightKitAdminRealistListItemRenderer

    # Defines some rows renderer type aliases to re-use in other parts of the configuration (rows_renderer_types_general and
    # rows_renderer_types_specific options can both use those aliases).
    # An alias is whatever you want, depending on your rows renderer instance.
    # The generic_tags (defined in the list option at the root level) are available.
    rows_renderer_type_aliases:
        img100:
            type: Light_Realist.image
            width: 100

    # Defines rows renderer types to add to every generated list configuration file.
    # This can be overridden by the rows_renderer_types_specific option.
    # It's an array of columnName => type.
    # The type is whatever you want, depending on your rows renderer instance.
    # Also, the type can refer to an (pre-defined) alias by preceding it with the dollar symbol.
    # Note: aliases are defined with the rows_renderer_types_alias option.
    # The generic_tags (defined in the list option at the root level) are available.
    rows_renderer_types_general:
        avatar_url: $img100
        _action:
            type: my_action
            type: Light_Realist.mixer
            separator: &nbsp;
            items:
                -
                    type: Light_Realist.hub_link
                    text: Edit
                    url_params_add_ric: true
                    url_params:
                        plugin: !{galaxyName}/!{plugin}
                        controller: Generated/{TableClass}Controller
                        m: f
                    icon: fas fa-edit

                -
                    type: Light_Kit_Admin.list_action
                    text: Delete
                    action_id: realist-delete_rows
                    include_ric: true
                    confirmExecute:
                        text: Are you sure you want to delete this row?
                        loader: true
                    params:
                        table: {table}
                    icon: fas fa-trash-alt


                -
                    type: Light_Kit_Admin.list_action
                    text: Duplicate row
                    action_id: realist-duplicate_row
                    confirmExecute:
                        text: Are you sure you want to duplicate this row?
                        loader: true

                    include_ric: true
                    icon: far fa-copy
                -
                    type: Light_Kit_Admin.list_action
                    confirmExecute:
                        text: Are you sure you want to duplicate this entity?
                        loader: true
                    text: Duplicate entity
                    action_id: realist-duplicate_row_deep
                    include_ric: true
                    icon: far fa-clone

        _checkbox: Light_Realist.checkbox

    # Defines rows renderer types to add for a specific table.
    # It has precedence over the rows_renderer_type_general option.
    # It's an array of table => types, with types being an array of columnName => type.
    # The type is whatever you want, depending on your rows renderer instance.
    # Also, the type can refer to an (pre-defined) alias by preceding it with the dollar symbol.
    # Note: aliases are defined with the rows_renderer_types_alias option.
    # The generic_tags (defined in the list option at the root level) are available.
    ?rows_renderer_types_specific:
        lud_user:
            avatar_url: $img100

    # An optional array of related links to add to all generated files.
    # Each related link is an array containing the properties you want.
    # Usually, you will use the following:
    # - text: string
    # - url: string
    # - icon: string
    # In the property values, you can use the generic tags (described in the list section comment).
    related_links:
        -
            text: Add new "{label}" item
            url: REALIST(Ling.Light_Realist, route, lch_route-hub, {plugin: !{galaxyName}/!{plugin}, controller: Generated/{TableClass}Controller, m:f})
            icon: fas fa-plus-circle

# This section defines the behaviour of the form configuration file generator
form:

    # The title of the form, defaults to:
    # - {Label} form
    # The generic tags (see the list description comment) can be used to replace some part of the title by
    # dynamic values.
    title: {Label} form

    # Whether to create a link to the corresponding list.
    # The default value is true.
    # This property is provided by Light_Kit_Admin_Generator (i.e. not in Light_RealGenerator).
    use_link_to_list: true

    # An array, empty by default, which can contain the row restriction to apply. The possible options are:
    # - read
    # - update
    #
    # Note: regular forms usually delegate the process of the form info to the RealformSuccessHandlerInterface,
    # which uses its own row restriction (see the on_success_handler property in this section for more details).
    # The "update" option here applies for potential external tools, such as an external multiple rows form editor for instance.
    #
    row_restriction: []
        - read
        - update

    # The target_dir is the path of the dir where to generate the files
    # It's an absolute path.
    # The tag {app_dir} can be used, and will be replaced with the actual "application root directory".
    target_dir: {app_dir}/config/data/!{galaxyName}.!{plugin}/Ling.Light_Realform/form/generated


    # This array let you ignore/skip columns that you want to exclude from the generated form config file.
    # It's an array of table => columnNames, with columnNames being an array of column names.
    # Note: it merges with the ignore_columns option set at the root level (if set).
    ?ignore_columns:
        lud_user:
            - password

    # Overrides the default form handler class (which defaults to a plain Chloroform instance) for all tables,
    # unless a more specific override has been defined with the form_handler_class_specific option (in
    # which case the more specific override is used).
    # It's a string representing the class to use.
    ?form_handler_class_general: My\Class
    # Overrides the default form handler class (which defaults to a plain Chloroform instance) for a given table.
    # It's an array of table => class.
    ?form_handler_class_specific:
        lud_user: My\Specific\Class

    # An array of variables that we can use in some parts of the form generator configuration:
    # - fields
    # - fields_merge_aliases
    # - fields_merge_specific
    # The variable notation is: {variable}.
    # Apart from the variables defined here, we also provide the following dynamic variables:
    # - table: the name of the current table
    # - field: the name of the current field (or empty string if not available)
    variables:
        plugin_prefix: !{shortName}


    # Overrides completely or partially the fields items.
    # It's an array of table => fieldItems, with fieldItems being an array of fieldName => fieldItem.
    # See the realform documentation for more info about the field item structure:
    # - https://github.com/lingtalfi/Light_Realform/blob/master/doc/pages/realform-config-example.md
    # By default, a required validator is added automatically for every generated field.
    # If you don't want the required validator for a particular field, you need to specify it with the not_required option.
    ?fields:
        lud_user:
            pseudo:
                label: the Pseudo



    # An array of aliasName => partialFieldItem,
    # with partialFieldItem being an array containing field item parts.
    # The partialFieldItems defined in this array can be referenced in other parts of the configuration:
    # - fields_merge_specific

    # Using aliases tends to reduce the verbosity of this file.
    #
    # The values of the partialFieldItem can use variables (aka tags).
    # The notation for a variable is defined in the variables section (see the variables section for more info).
    # The available variables are also defined there.
    fields_merge_aliases: []
#            ajax1:
#                type: ajaxFileBox
#                maxFile: 1
#                maxFileSize: null
#                mimeType: null
#                postParams:
#                    id: {plugin_prefix}-{table}-{field}
#                    csrf_token: REALGEN(crsf, realGen-ajaxform-{table}-{field})
#                validators:
#                    validUserDataUrl: []

    # Use this array to merge a field item with custom defined properties, based on a specific table and field.
    # It's an array of table => items,
    # with items being an array of field => partialItem,
    # with partialItem being either:
    # - an array of one ore more field items entries to merge with the target field item
    # - or an alias to such an array. To use an alias, prefix the alias name with the dollar symbol ($).
    # For more info about aliases, see the field_merge_aliases section.
    fields_merge_specific: []
#            lud_user:
#                avatar_url: $ajax1
#                password:
#                    type: password

    # An array to handle some special fields automatically.
    # It's an array of section => parameters.
    special_fields:
        # The chloroform_extensions section.
        # All fields coming from the Light_ChloroformExtension plugin should be handled there.
        # -> https://github.com/lingtalfi/Light_ChloroformExtension
        #
        chloroform_extensions:
            # Bool, whether to use table list on foreign keys.
            # The default value is true.
            # When true, if a field is a foreign key we will generate the configuration for a table list field (https://github.com/lingtalfi/Light_ChloroformExtension/blob/master/doc/pages/conception-notes.md#tablelistfield).
            use_table_list: true

            # Array, the security directive to use with the table list(s).
            # See the [Light_Nugget baked in security system](https://github.com/lingtalfi/Light_Nugget/blob/master/doc/pages/conception-notes.md#a-baked-in-security-system-for-nugget-users) for more details.
            table_list_security:
                any:
                    permission: Ling.Light_Kit_Admin.admin


    # An array of table => notRequiredFields, with notRequiredFields being an array of the fields for which you don't
    # want a required validator to be set automatically.
    not_required: []
#            lud_user:
#                - extra
#                - avatar_url

    # Array, defines how the on_success_handler section (of the realform config file) is generated.
    ?on_success_handler:
        # string, defines the type of success handler
        # The available values are:
        # - database
        type: database

    # Bool. Optional. Defaults to true.
    # Whether to use the multiplier mode on has tables.
    # It's used to generate both the database success handler and the realform configuration items.
    #
    # See https://github.com/lingtalfi/TheBar/blob/master/discussions/form-multiplier.md for more info.
    #
    # If you use this option, make sure that
    # - the multiplier.column is placed before the multiplier.update_cleaner_column in the table,
    # - the strict ric of the table is composed of the multiplier column and update_cleaner_column only
    # That's because our generator guesses the multiplier columns from the strict ric,  and considers the first
    # entry to be the foreign key to the left member, and the second the foreign key to the right member of the has table.
    # More info on ric strict: https://github.com/lingtalfi/NotationFan/blob/master/ric.md#the-strict-ric
    #
    use_multiplier_on_has: true

    # An array of related links to add as the rendering.related_links property in all the generated form conf.
    # The default value is an empty array, but a practical value to use is the array below.
    # In the property values, you can use the generic tags (described in the list section comment).
    related_links:
        -
            text: See the list of "{Label}" items
            url: ::(@reverse_router->getUrl(lch_route-hub, {plugin: !{galaxyName}/!{plugin}, controller: Generated/{TableClass}Controller}))::
            icon: fas fa-plus-circle

# This section defines the behaviour of the menu configuration file generator
# Note: the generator for this section also uses the route_prefix information found in the route section of this file.
menu:
    # The target_file is the path of the file to generate.
    # It's an absolute path.
    # The tag {app_dir} can be used, and will be replaced with the actual "application root directory".
    target_file: {app_dir}/config/data/!{galaxyName}.!{plugin}/Ling.Light_BMenu/generated/admin_main_menu.byml




    # The menu generator can operate in two different modes, which affects how the menu configuration is generated.
    # By default (i.e. mode=default), the menu generator assumes that you want to generate menu configs for plugin
    # that use "direct injection" (see the Light_BMenu conception notes for more details),
    # and the generated array contains the menu items as entries.
    #
    # However, if you rely on the "host" to add the menu items for you, you should use to "plugin" mode, in which
    # it's assumed that your plugin has only one table prefix, and in which case the parent menu item's properties
    # are direct children of the generated menu config.
    #
    # The possible values are: default|plugin (default=default)
    #
    mode: default




    # By default, we generate routes using the controller_hub service (to avoid having too many routes).
    # The string below represents the controller url parameter (see the controller hub service documentation for
    # more info: https://github.com/lingtalfi/Light_ControllerHub).
    # The following tags are available:
    #       - {Table}: the pascal case version of the table name used to generate the controller (https://github.com/lingtalfi/ConventionGuy/blob/master/nomenclature.stringCases.eng.md#pascalcase).
    #               The php extension will be added to create the file corresponding to the class name.
    #       - {TableNoPrefix}: same as the {Table} tag, but without the table prefix (if the table has a prefix).
    #                   Note: table prefixes are defined with the table_prefixes section at the root level
    controller_format: Generated\{Table}Controller


    # Whether to group the menu items by table prefix. Defaults to true.
    group_by_prefix: true

    item_icon_parent: fas fa-puzzle-piece
    item_prefix_parent: !{shortName}
    item_prefix_child: !{shortName}
    item_plugin: !{plugin}
    ?item_default_right: !{plugin}.user

    # An array of prefix => label.
    # The prefixes are stripped from the table name to create human readable labels.
    # The prefixes are also used to group the menu items together (if group_by_prefix=true).
    # The labels are used only if group_by_prefix=true, and represent the label to display on the parent menu item.
    prefixes:
        !{prefix}: !{menuName}

    # Define a right to assign by default to each table starting with a certain prefix.
    # It's an array of prefix: right.
    # Note: the value defined here can be overridden with the "items" option (see below).
    # Note2: the default right value used by the generator on any menu item is "Ling.Light_Kit_Admin.user".
    prefix_to_rights:
        # Note: in this case, the Light_Database doesn't provide any permission group, so we use
        # the permissions provided by light kit admin
        !{prefix}: Ling.Light_Kit_Admin.admin


    # An array of has keyword => has label.
    # The default array contains only one element being: "has" => "/".
    # When an has keyword is found in the table name, sandwiched with underscores, as in table1_has_table2,
    # then it's used to split the table name in two labels, separated with the "has label".
    # So for instance, the label of the menu item corresponding to the table1_has_table2 table would be:
    # Table1/Table2  (by default, labels have their first letter uppercase, and the slash is the has label).
    # Note: it's allowed to have the same has keyword multiple times in the same table name.
    # So for instance table1_has_table2_has_table3 will become the label: Table1/Table2/Table3 (by default).
    # However, combining different keywords in the same table name is not implemented (yet).
    has_keywords:
        has: /

    # Override completely or partially the default items on a per-table basis.
    # An array of table => item.
    # More about the item structure here: https://github.com/lingtalfi/Light_BMenu/blob/master/doc/pages/conception-notes.md#the-menu-item-structure
    ?items:
        lud_user:
            text: The user list




# This section defines the behaviour of the Controller generator, which will generate the controllers and the
# kit page configuration for the defined set of tables.
#
#
#
# CLASSES
# ----------
# This system will potentially generate multiple classes.
# For all those generated classes, the following rules apply:
# - The bsr-0 naming convention will be used to generate the file from the class name.
#           (for more info about bsr-0 visit https://github.com/lingtalfi/BumbleBee/blob/master/Autoload/convention.bsr0.eng.md)
# - The following tags are available:
#       - {Table}: the pascal case version of the table name used to generate the controller (https://github.com/lingtalfi/ConventionGuy/blob/master/nomenclature.stringCases.eng.md#pascalcase).
#               The php extension will be added to create the file corresponding to the class name.
#       - {TableNoPrefix}: same as the {Table} tag, but without the table prefix (if the table has a prefix).
#                   Note: table prefixes are defined with the table_prefixes section at the root level
#
# Those rule apply to the following properties:
# - controller_classname
# - custom_controller_classname
# - base_controller_classname (exception: the the {Table} and {TableNoPrefix} tags are not available for this class)
#
# Hierarchy wise, we have:
# CustomController extends Controller extends BaseController extends ParentController
#
# Note: the ParentController can be set using the parent_controller property.
#
# The CustomController is the controller reserved for the developer; if the file already exists it's never overwritten.
# It's created only if it doesn't exist already, saving the developer from creating the class manually.
# It's used to override the Controller class.
#
# The Controller class contains the render, renderForm and renderList methods, it handles the display of a form and/or list,
# using the realform or realist plugins under the hood.
# More info:
# - realform: https://github.com/lingtalfi/Light_Realform
# - realist: https://github.com/lingtalfi/Light_Realist
#
# The BaseController class contains the code shared by all generated Controllers.
# It basically contains the code that handle the form from a controller.
#
# The BaseController is just a string, it's whatever you want (LightController, MyPluginBaseController, ...).
#
#
# KIT PAGE CONFIGURATION
# ----------
# For each table, two (kit) page configuration files are generated:
# - one for the list
# - one for the form
#
# Both configuration files are called from the generated controller class.
# The following tags are available inside the kit page configuration files:
# - {tableLabel}: the label of the table (based on internal heuristics)
# - {TableLabel}: same as {tableLabel}, but with the first letter uppercase
#
#
#
controller: []
    # The path to the directory that will contain all the generated classes.
    # The following tags are available:
    # - {app_dir}: the path to the application directory
    class_root_dir: {app_dir}/universe

    # For all following variables,
    # The following tags are available:
    # - {table}
    # - {tableNoPrefix}
    controller_vars:
        # The realist request declaration id to call from the controller.
        # This setting should synced with the list.target_dir setting in this file.
        # The default value is:
        #   Ling.Light_Kit_Admin:generated/{table}
        realist_request_declaration_id_format: '!{galaxyName}.!{plugin}:generated/{table}'

        # The kit page to call when rendering the list
        # The default value is:
        #   !{galaxyName}.!{plugin}/generated/{table}_list
        list_page_format: '!{galaxyName}.!{plugin}/generated/{table}_list'

        # The form identifier to call to process the form when the form page is rendered
        # The default value is:
        #   Ling.Light_Kit_Admin.generated/{table}
        form_identifier_format: '!{galaxyName}.!{plugin}:generated/{table}'

        # The kit page to call when rendering the form
        # The default value is:
        #   !{galaxyName}.!{galaxyName}.!{plugin}/generated/{table}_form
        form_page_format: '!{galaxyName}.!{plugin}/generated/{table}_form'

        # The relative path from the app dir to the form configuration file
        # Defaults to: config/open/Ling.Light_Kit_Admin/lke/pages/!{galaxyName}.!{plugin}/generated/{table}_form.byml
        # The following extra tags are available:
        #   - tableLabel
        #   - TableLabel
        #   - Table
        form_config_path_format: config/open/Ling.Light_Kit_Admin/lke/pages/!{galaxyName}.!{plugin}/generated/{table}_form.byml

        # The relative path from the app dir to the list configuration file
        # Defaults to: config/open/Ling.Light_Kit_Admin/lke/pages/!{galaxyName}.!{plugin}/generated/{table}_list.byml
        # The following extra tags are available:
        #   - tableLabel
        #   - TableLabel
        #   - Table
        list_config_path_format: config/open/Ling.Light_Kit_Admin/lke/pages/!{galaxyName}.!{plugin}/generated/{table}_list.byml

        # An array of related links to add to all the generated form kit page conf.
        # The default value is basically the array below, except that the plugin is replaced with Light_Kit_Admin.
        # The following extra tags are available:
        #   - tableLabel
        #   - TableLabel
        #   - Table
        form_page_related_links:
            -
                text: See the list of "{TableLabel}" items
                url: ::(@reverse_router->getUrl(lch_route-hub, {plugin: !{galaxyName}/!{plugin}, controller: Generated/{Table}Controller}))::
                icon: fas fa-plus-circle


    # Bool, whether to generate the custom controllers.
    # The default value is false.
    ?use_custom_controller: true

    # The class name of the controller to generate.
    controller_classname: !{galaxyName}\!{plugin}\Controller\Generated\{Table}Controller

    # The class name of the custom controller to generate.
    # This is mandatory only if the use_custom_controller setting is set to true.
    ?custom_controller_classname: !{galaxyName}\!{plugin}\Controller\Generated\Custom\Custom{Table}Controller

    # The class name of the base controller to generate.
    base_controller_classname: Ling\Light_Kit_Admin\Controller\RealAdminPageController

    # The class name of the parent controller, which all other classes derive from.
    parent_controller: !{galaxyName}\Light_Kit_Admin\Controller\AdminPageController




# --------------------------------------
# SECTION BELOW NOT IMPLEMENTED FOR NOW, as Light_Kit_Admin uses a hub controller for generated routes.
# But I keep the ideas below, just in case.
# So in Light_Kit_Admin just use the LightKitAdminService->getUrlByController method.
# --------------------------------------
#    # This section defines the behaviour of the route configuration file generator.
#    # The generator will create two routes per table, one leading to the form page, and the other to the list.
#    route: []
#        # The prefix to add before the route name.
#        # Note: the prefix and the route name are separated by a dash.
#        # The default value is: lkagen_route
#        ?route_prefix: lkagen_route
#
#        # The target file is where to create the routes
#        target_file: {app_dir}/config/data/Ling.Light_Kit_Admin/Ling.Light_EasyRoute/lkagen_routes.byml
#
#
#        # The pattern for the list route
#        # The following tags are available:
#        # - {table}: the table name
#        pattern_format_list: /objects/{table}
#
#        # The pattern for the form route. Same tags as pattern_format_list (see above for more details).
#        pattern_format_form: /objects/{table}
#
#        # Array: the url params for the generated list route.
#        # By default, it's an empty array.
#        # See more details about url_params here: https://github.com/lingtalfi/Light/blob/master/doc/pages/route.md.
#        url_params_list: []
#
#        # Array: the url params for the generated form route. Same description as url_params_list (see above).
#        url_params_form:
#            m: f
#
#        # The controller method to use for the list route.
#        # The default value is render.
#        method_list: render
#
#        # The controller method to use for the form route
#        # The default value is render.
#        method_form: render





