<?php


namespace Ling\Bootstrap4AdminTable\Renderer;


use Ling\Bat\StringTool;
use Ling\Bootstrap4AdminTable\Exception\Bootstrap4AdminTableException;
use Ling\Bootstrap4AdminTable\RendererWidget\AdvancedSearchRendererWidget;
use Ling\Bootstrap4AdminTable\RendererWidget\ListGeneralActionRendererWidgetInterface;
use Ling\Bootstrap4AdminTable\RendererWidget\NeckFiltersRendererWidgetInterface;
use Ling\Bootstrap4AdminTable\RendererWidget\RendererWidgetInterface;
use Ling\Bootstrap4AdminTable\RendererWidget\ToolbarRendererWidgetInterface;
use Ling\HtmlPageTools\Copilot\HtmlPageCopilot;
use Ling\Light_Realist\Rendering\OpenAdminTableBaseRealistListRenderer;
use Ling\Light_SpinKitHelper\SpinKitHelperService;


/**
 * The Bootstrap4AdminTableRenderer class.
 *
 * Note: this class works in pair with a php service.
 * The rows are generated by this service and dynamically injected via javascript.
 * So, there is no setRows method in this php class.
 *
 */
class Bootstrap4AdminTableRenderer extends OpenAdminTableBaseRealistListRenderer
{


    /**
     * This property holds the widgets for this instance.
     * @var RendererWidgetInterface[]
     */
    protected $widgets;


    /**
     * This property holds whether to use the "spinkit_helper" service.
     * @var bool = true
     */
    protected $useSpinKitService;

    /**
     * This property holds the temporary _spinKitCssId for this instance.
     * @var string|null
     */
    private $_spinKitCssId;


    /**
     * Builds the Bootstrap4AdminTableRenderer instance.
     */
    public function __construct()
    {
        parent::__construct();
        $this->widgets = [];
        $this->useSpinKitService = true;
        $this->_spinKitCssId = null;
    }


    /**
     * Registers a widget.
     * The possible widget identifiers are listed in the @page(conception notes).
     *
     *
     * @param string $identifier
     * @param RendererWidgetInterface $rendererWidget
     */
    public function registerWidget(string $identifier, RendererWidgetInterface $rendererWidget)
    {
        $this->widgets[$identifier] = $rendererWidget;
        $this->useWidgets[$identifier] = true;
    }

    /**
     * Sets the useSpinKitService.
     *
     * @param bool $useSpinKitService
     */
    public function setUseSpinKitService(bool $useSpinKitService)
    {
        $this->useSpinKitService = $useSpinKitService;
    }




    //--------------------------------------------
    //
    //--------------------------------------------
    /**
     * @implementation
     */
    public function renderListGeneralActions()
    {
        if (true === $this->isWidgetEnabled("general_actions")) {
            /**
             * @var $widget ListGeneralActionRendererWidgetInterface
             */
            $widget = $this->getWidget("general_actions");
            $widget->setGeneralActions($this->listGeneralActions);
            $widget->render();
        }


    }


    /**
     * @implementation
     */
    public function render()
    {

        $this->callAssets();

        if (null === $this->containerCssId) {
            $this->containerCssId = 'bootstrap4-admin-table-renderer-list';
        }

        if (null === $this->_spinKitCssId) {
            $this->_spinKitCssId = StringTool::getUniqueCssId('bs4at-');
        }


        ?>
        <div class="
        <?php if (true === $this->useSpinKitService): ?>
        sk-loading
        <?php endif; ?>
        position-relative" id="<?php echo $this->_spinKitCssId; ?>">
            <?php

            if (true === $this->useSpinKitService && null !== $this->container) {
                /**
                 * @var $spinkitHelper SpinKitHelperService
                 */
                $spinkitHelper = $this->container->get('spinkit_helper');
                echo $spinkitHelper->render("circle");
            }


            //--------------------------------------------
            // PREPARING OTHER WIDGETS IF NECESSARY
            //--------------------------------------------
            // preparing the neck filters widget
            if (
                true === $this->isWidgetEnabled("neck_filters") &&
                true === array_key_exists("neck_filters", $this->widgets)) {
                $neckFiltersWidget = $this->widgets["neck_filters"];
                if ($neckFiltersWidget instanceof NeckFiltersRendererWidgetInterface) {
                    $neckFiltersWidget->setColumns2DataTypes($this->dataTypes);
                    $neckFiltersWidget->setUseCheckbox($this->isWidgetEnabled("checkbox"));
                }
            }


            $this->printWidgetIfExists("debug_window");
            $this->printSearchWidgets();


            $hasNbRows = $this->isWidgetEnabled("number_of_rows_info");
            $hasNbIpp = $this->isWidgetEnabled("number_of_items_per_page");
            $hasToolbar = $this->isWidgetEnabled("toolbar");
            $number = (int)$hasNbRows + (int)$hasNbIpp + (int)$hasToolbar;
            $colSize = 0;
            if (3 === $number) {
                $colSize = 4;
            } elseif (2 === $number) {
                $colSize = 6;
            } elseif (1 === $number) {
                $colSize = 12;
            }


            ?>
            <div class="row">
                <?php if ($hasNbRows): ?>
                    <div class="col-sm-<?php echo $colSize; ?>">
                        <?php $this->getWidget("number_of_rows_info")->render(); ?>
                    </div>
                <?php endif; ?>
                <?php if ($hasNbIpp): ?>
                    <div class="col-sm-<?php echo $colSize; ?>">
                        <?php $this->getWidget("number_of_items_per_page")->render(); ?>
                    </div>
                <?php endif; ?>
                <?php if ($hasToolbar): ?>
                    <div class="col-sm-<?php echo $colSize; ?>">
                        <?php
                        $toolbarWidget = $this->getWidget("toolbar");
                        if ($toolbarWidget instanceof ToolbarRendererWidgetInterface) {
                            $toolbarWidget->setGroups($this->listActionGroups);
                        }
                        $toolbarWidget->render();
                        ?>
                    </div>
                <?php endif; ?>
            </div>


            <div class="table-responsive">
                <?php if (true === $this->isWidgetEnabled("table")): ?>
                    <table class="table table-striped table-bordered table-hover table-sm bsatr-main-table">
                        <?php if (true === $this->isWidgetEnabled("head")): ?>

                            <thead class="thead-dark oath-head-columns-sort">
                            <tr>
                                <?php if (true === $this->isWidgetEnabled("checkbox")): ?>
                                    <th scope="col">
                                        <div>
                                            <input type="checkbox" class="bsatr-master-checkbox" value="" id=""/>
                                        </div>
                                    </th>
                                <?php endif; ?>
                                <?php foreach ($this->labels as $colName => $label):
                                    $type = $this->getDataType($colName);
                                    ?>
                                    <th scope="col">
                                        <?php if ('action' !== $type): ?>

                                            <?php if (true === $this->isWidgetEnabled("head_sort")): ?>

                                                <div class="rtt-emitter" data-rtt-tag="col_order"
                                                     data-rtt-extra-tag_group="head_columns_sort">
                                                    <a href="#" class="text-white-50 oath-sort-trigger d-flex">
                                                        <span class="text-white"><?php echo $label; ?></span>

                                                        <span class="ml-auto">
                                                            <i class="fas fa-sort-amount-down oath-icon d-none"
                                                               data-state="desc"></i>
                                                            <i class="fas fa-sort-amount-up oath-icon d-none"
                                                               data-state="asc"></i>
                                                            <i class="fas fa-minus  oath-icon" data-state="neutral"></i>

                                                            <span class="d-none" data-rtt-variable="column"
                                                                  data-rtt-value="<?php echo htmlspecialchars($colName); ?>"></span>
                                                            <span class="d-none" data-rtt-variable="direction"
                                                                  data-rtt-value="neutral"></span>

                                                        </span>
                                                    </a>
                                                </div>
                                            <?php else: ?>
                                                <div><?php echo $label; ?></div>
                                            <?php endif; ?>

                                        <?php else: ?>
                                            <div><?php echo $label; ?></div>
                                        <?php endif; ?>
                                    </th>
                                <?php endforeach; ?>
                            </tr>
                            </thead>
                        <?php endif; ?>

                        <tbody>


                        <?php $this->printWidgetIfExists("neck_filters");; ?>

                        <?php for ($i = 1; $i <= 3; $i++): ?>

                            <tr>
                                <?php if (true === $this->isWidgetEnabled("checkbox")): ?>
                                    <td>
                                        <input type="checkbox" value="" id=""/>
                                    </td>
                                <?php endif; ?>
                                <td>1</td>
                                <td>Mark</td>
                                <td>Otto</td>
                                <td>/my/url</td>
                                <td>(rights)</td>
                                <td>(extra)</td>
                                <td>
                                    <button type="button" class="btn btn-outline-primary btn-sm mb-2 text-nowrap"><i
                                                class="far fa-edit"></i> Edit
                                    </button>
                                </td>
                            </tr>
                        <?php endfor; ?>
                        </tbody>
                    </table>
                <?php endif; ?>


            </div>
            <?php $this->printWidgetIfExists("pagination"); ?>

        </div>
        <?php


        $this->printJavascript();

    }


    /**
     * Returns the RendererWidget instance identified by $identifier, or null if it doesn't exist.
     *
     *
     * @param string $identifier
     * @return RendererWidgetInterface|null
     */
    public function getWidget(string $identifier): ?RendererWidgetInterface
    {
        if (array_key_exists($identifier, $this->widgets)) {
            return $this->widgets[$identifier];
        }
        return null;
    }

    //--------------------------------------------
    //
    //--------------------------------------------

    /**
     * Prints the widget identified by $identifier if it has been registered.
     *
     * @param string $identifier
     */
    protected function printWidgetIfExists(string $identifier)
    {
        if (
            true === $this->isWidgetEnabled($identifier) &&
            true === array_key_exists($identifier, $this->widgets)) {
            $this->widgets[$identifier]->render();
        }
    }

    /**
     * Prints the search widgets.
     * Note: in this implementation, the two widgets are entangled in the because of the html code,
     * that's why we cannot have separate standalone widgets for them.
     */
    protected function printSearchWidgets()
    {
        $hasGlobalSearch = (true === $this->isWidgetEnabled("global_search"));
        $hasAdvancedSearch = (true === $this->isWidgetEnabled("advanced_search"));
        $hasBothSearch = (true === $hasGlobalSearch && true === $hasAdvancedSearch);

        /**
         * In this implementation, we only use a certain type of advanced_search renderer widget.
         * @var $advancedWidget AdvancedSearchRendererWidget
         */
        $advancedWidget = $this->getWidget("advanced_search");
        if (null !== $advancedWidget) {
            if (false === ($advancedWidget instanceof AdvancedSearchRendererWidget)) {
                $type = gettype($advancedWidget);
                throw new Bootstrap4AdminTableException("This renderer cannot render an advanced_search widget which is not
                an instance of AdvancedSearchRendererWidget, $type given.");
            }
        }


        if (true === $hasGlobalSearch || true === $hasAdvancedSearch): ?>
            <div class="row no-gutters mb-3">
                <?php if (true === $hasBothSearch): ?>
                    <div class="col-lg-9">
                        <?php $this->printWidgetIfExists("global_search"); ?>
                    </div>
                    <div class="col-lg-3 text-lg-right ">
                        <?php $advancedWidget->renderLink(); ?>
                    </div>
                <?php else: ?>
                    <?php if (true === $hasGlobalSearch): ?>
                        <?php $this->printWidgetIfExists("global_search"); ?>
                    <?php else: ?>
                        <?php $advancedWidget->renderLink(); ?>
                    <?php endif; ?>
                <?php endif; ?>

            </div>
        <?php endif; ?>

        <?php

        if (true === $hasAdvancedSearch) {
            $advancedWidget->setFields($this->sqlColumns);
            $advancedWidget->render();
        }
    }


    /**
     * Calls the necessary assets to display the list correctly.
     */
    protected function callAssets()
    {
        if (null !== $this->container) {
            /**
             * @var HtmlPageCopilot $copilot
             */
            $copilot = $this->container->get("html_page_copilot");


            $copilot->registerLibrary("realistTagTransfer", [
                "/plugins/Light_Realist/js/realist-tag-transfer.js",
            ]);

            $copilot->registerLibrary("openAdminTableHelper", [
                "/plugins/Light_Realist/js/open-admin-table-helper.js",
            ]);


            $copilot->registerLibrary("listActionHandlerHelper", [
                "/plugins/Light_Realist/js/list-action-handler-helper.js",
            ]);

            $copilot->registerLibrary("listGeneralActionHandlerHelper", [
                "/plugins/Light_Realist/js/list-general-action-handler-helper.js",
            ]);

            $copilot->registerLibrary("realistRegistry", [
                "/plugins/Light_Realist/js/realist-registry.js",
            ]);


            //--------------------------------------------
            //
            //--------------------------------------------
            $copilot->registerLibrary("jAcpHep", [
                "/libs/universe/Ling/JAcpHep/acphep-helper.js",
            ]);

            $copilot->registerLibrary("jRicAdminTableHelper", [
                "/libs/universe/Ling/JRicAdminTableHelper/ric-admin-table-helper.js",
            ]);

            $copilot->registerLibrary("jResponsiveTableHelper", [
                "/libs/universe/Ling/JResponsiveTableHelper/responsive-table-helper.js",
            ], [
                "/libs/universe/Ling/JResponsiveTableHelper/responsive-table-helper.css",
            ]);
        }
    }


    /**
     * Prints the necessary javascript.
     */
    protected function printJavascript()
    {


        $contentRowStartIndex = 1;
        if ($this->isWidgetEnabled("neck_filters")) {
            $contentRowStartIndex = 2;
        }

        $sCollapse = json_encode($this->collapsibleColumnIndexes);
        $listActionLeaves = $this->getListActionGroupLeafItems();
        $listGeneralActionLeaves = $this->listGeneralActions;


        ?>
        <script>
            // breakpoint sm=576
            document.addEventListener("DOMContentLoaded", function (event) {
                $(document).ready(function () {


                    var jContainer = $('#<?php echo $this->containerCssId; ?>');
                    var jSpinKitContainer = $('#<?php echo $this->_spinKitCssId; ?>');
                    var jTable = jContainer.find('.bsatr-main-table:first');
                    var listActionLeaves = <?php echo json_encode($listActionLeaves); ?>;
                    var listGeneralActionItems = <?php echo json_encode($listGeneralActionLeaves); ?>;


                    var ricHelper = new RicAdminTableHelper({
                        jContainer: jTable,
                        serverUri: "/realist-ajax-service",
                    });


                    // checkbox
                    <?php if(true === $this->isWidgetEnabled("checkbox")): ?>
                    jContainer.find('.bsatr-master-checkbox').on('click', function () {
                        var isChecked = $(this).is(":checked");
                        jContainer.find('.oath-row-select-checkbox').prop('checked', isChecked);
                        ricHelper.triggerOnCheckboxSelected();
                    });
                    <?php endif; ?>


                    var listActionHelper = new ListActionHandlerHelper({
                        jContainer: jContainer,
                        jTable: jTable,
                        listActionLeaves: listActionLeaves,
                        ricHelper: ricHelper,
                    });
                    listActionHelper.listen();

                    var listGeneralActionHelper = new ListGeneralActionHandlerHelper({
                        jContainer: jContainer,
                        listGeneralActionItems: listGeneralActionItems,
                    });
                    listGeneralActionHelper.listen();


                    var rth = new ResponsiveTableHelper({
                        jTable: jTable,
                        extraColumnContent: function (jCell, jTr) {
                            if (jCell.is("th")) {
                                return '<th></th>';
                            } else {
                                if (jTr.hasClass('oath-neck-filters')) {
                                    return '<td></td>';
                                }
                                return '<td><a class="rth-toggle-button" href=""><i class="fas fa-plus-circle"></i></a></td>';
                            }
                        },
                        contentRowStartIndex: <?php echo $contentRowStartIndex; ?>,
                        collapsibleColumnIndexes: <?php echo $sCollapse; ?>,
                        columnLabels: 'auto',
                        padding: 'auto',
                        expandedColumnFilterIndexes: [0],
                        breakpoints: [576],
                    });
                    var rthStarted = false;


                    var helper = new OpenAdminTableHelper({
                        jContainer: jContainer,
                        table_selector: '.bsatr-main-table',
                        request_id: "<?php echo $this->requestId; ?>",
                        csrf_token: "<?php echo $this->csrfToken; ?>",
                        on_request_before: function () {
                            if (true === rthStarted) {
                                rth.removePlusColumn();
                            }
                        },
                        on_request_after: function (jContainer) {
                            <?php if(true === $this->useSpinKitService): ?>
                            jSpinKitContainer.removeClass("sk-loading");
                            <?php endif; ?>


                            rthStarted = true;
                            rth.listen();

                            // var show = false;
                            // $(window).on('click', function () {
                            //
                            //     // if (false === show) {
                            //     //     rth.hideShowColumns([2, 3], false);
                            //     // } else {
                            //     //     rth.hideShowColumns([2, 3]);
                            //     //
                            //     // }
                            //     // show = true;
                            // });
                        },
                    });
                    helper.listen();


                    ricHelper.listen();


                    /**
                     * Share the objects with other js tools
                     */
                    window.RealistRegistry.setOpenAdminTableHelper(helper);

                });
            });
        </script>
        <?php
    }


}