{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../../../../../DefaultFileUploader.svelte",
    "../../../../../../DefaultFileEditor.svelte"
  ],
  "sourcesContent": [
    "<script>\n\n\n    import {onMount, setContext} from 'svelte';\n    import jsx from 'js-extension-ling';\n    /**\n     * I don't know why the commented line below is removed when I compile,\n     * maybe it's rollup or a plugin that removes it?\n     * Anyway, make sure you have this line un-commented in order for this plugin to work.\n     */\n    // import { fade } from 'svelte/transition';\n\n    import { fade } from 'svelte/transition';\n    import panda from \"panda-headers\";\n    import Validator from \"./modules/Validator\";\n    import GlobalProgressTracker from './modules/GlobalProgressTracker';\n    import Translatee from \"translatee\";\n    import DropZoneHandler from \"js-dropzone-handler\";\n    import ChunkUploader from \"chunk-uploader\";\n    import dragula from \"dragula\";\n    import FileEditor from \"./components/DefaultFileEditor.svelte\";\n\n\n    //----------------------------------------\n    // EXPORT OPTIONS\n    //----------------------------------------\n    export let options = {};\n\n    //----------------------------------------\n    // SCRIPT VARIABLES\n    //----------------------------------------\n    options = jsx.extend(true, {\n        /**\n         * bool=false.\n         * If true, this will add some bootstrap markup, mainly for buttons (things like btn btn-primary).\n         * Note: you will still an external style sheet of yours to customize further, this is just to lay down the\n         * basic html markup which is the first step to the bootstrapization of this widget.\n         *\n         */\n        useBootstrap: false,\n        /**\n         * string=eng.\n         *\n         * The language used in the gui.\n         *\n         * Possible values are:\n         * - eng\n         * - fra\n         *\n         * To add your own, start with a copy/paste and adapt of the **lang/lang-fra.js** file.\n         *\n         *\n         */\n        lang: \"eng\",\n        /**\n         * int=1.\n         * The maximum number of files that this widget will handle.\n         * If the value is -1, then it can handle any number of files.\n         *\n         * If the value is 1, the widget will create an input (html element) that results in a scalar when the form is posted.\n         * If the value is more than 1, the widget creates inputs of that results in an array when the form is posted.\n         *\n         */\n        maxFile: 1,\n        /**\n         * string=dropzone-hover.\n         * The css class added to the dropzone when the user's mouse is over the dropzone of the widget while he's dragging\n         * a file from his OS.\n         */\n        dropzoneOverClass: \"dropzone-hover\",\n        /**\n         * array of strings=[].\n         * An array of the urls to initialize the widget with.\n         * Those urls will be loaded in the widget at startup.\n         *\n         */\n        urls: [],\n        /**\n         * string=the_file.\n         * The name attribute of the input html element(s) generated by this widget.\n         */\n        name: \"the_file\",\n        /**\n         * int=-1.\n         * The maximum file size allowed for uploaded files.\n         * You can specify human like values, such as 1.6k, 1.3M, etc...\n         * The [converthumansizetobytes function](https://github.com/lingtalfi/js-extension-ling#converthumansizetobytes) is used under the hood.\n         *\n         * If -1, then any size is allowed.\n         */\n        maxFileSize: -1,\n        /**\n         * int=64.\n         * The maximum length allowed for the filename of the uploaded files.\n         */\n        maxFileNameLength: 64,\n        /**\n         * array|string=null.\n         *\n         * The list of allowed file mime types for uploaded files.\n         * null means every mime type is allowed.\n         */\n        mimeType: null,\n        /**\n         * array|string=null.\n         *\n         * The list of allowed file extensions for uploaded files.\n         * null means every extension is allowed.\n         */\n        allowedFileExtension: null,\n        /**\n         * string=file.\n         * The name of the uploaded file when sent to the server (via post).\n         */\n        uploadItemName: \"file\",\n        /**\n         * callback=the callback below.\n         * When there is a problem with the server's response, this callback is called.\n         * Note, it's called in addition to the default error handling system of this widget (i.e. it doesn't override\n         * the widget's default behaviour).\n         */\n        onServerError: function (errorMessage) {\n            console.log(errorMessage);\n        },\n        /**\n         * callback=the callback below.\n         *\n         *\n         * This callback returns whether the given url is external or internal.\n         *\n         * External means it's not recognized by the server (i.e. the server can't identify a file from that url).\n         * Internal means it's recognized by the server.\n         *\n         * The behaviour of the server when an external urls is given depends on the server.\n         * Some server will reject the request, some others will create a new internal url and return it to the client\n         * so that the file can be handled correctly on the subsequent requests.\n         *\n         * Client side (this script), we have our own problems to solve.\n         * The problem that we have which requires this callback occurs in the following situation:\n         *\n         *\n         * update\n         * ----------\n         *\n         * When the page starts, and an external url is given, the file item is displayed normally,\n         * then when the user edits the file by opening the file editor dialog, when he clicks the update button,\n         * that's where the problem begin, because our script sends the binary file only if the file has been modified\n         * (image cropped, or new file dropped on the file editor dialog).\n         * However if the user just changes the name of the file and click the update button, then our script\n         * by default won't send the binary file, and so the server will be missing this information.\n         *\n         * In order for our script to send the binary file while preserving our optimized system,\n         * we use this callback, which returns whether the given url is external or internal.\n         *\n         *\n         * Note: you could make this work all the time by making this callback return true all the time,\n         * but then the binary file would be sent on every update, that would defeat the purpose of our optimization.\n         *\n         * If you don't use external urls at all, then you don't need to worry about this callback at all.\n         * If your application potentially uses external urls and you want your server to handle them (assuming it can),\n         * then we recommend that you set this callback accordingly.\n         *\n         * By default, we return false, which means that there will be some potential problem if you try to send\n         * an external url. But the intent of this choice is that you become aware of this problem and fix it to benefit\n         * the optimized version of our script.\n         *\n         * If you're lazy and don't care of perfs, return true (not recommended).\n         *\n         *\n         * Also, note that usually, if the server handles external urls, it will return an internal url,\n         * so the isExternalUrl callback is just used the on the first update of an external url.\n         *\n         *\n         *\n         * delete\n         * ----------\n         * Also, the externalUrl is used with the delete action.\n         * Since the server won't be able an external url, when we delete an external url's file, we simply\n         * don't ask the confirmation from the server.\n         *\n         *\n         */\n        isExternalUrl: function (url) {\n            return false;\n        },\n        /**\n         * string=/upload.php\n         * The url of the server.\n         */\n        serverUrl: \"/upload.php\",\n        /**\n         * map={}.\n         * A map of extra parameters to pass (via post) with the server requests.\n         */\n        payload: {},\n        /**\n         * bool=false.\n         * If true, the \"upload files\" button won't show up, and the files are automatically uploaded\n         * as soon as the users adds them (either using the \"add file\" button, or by dropping them into the dropzone).\n         */\n        immediateUpload: false,\n        /**\n         * bool=false.\n         * Whether to communicate with a virtual server like this one: https://github.com/lingtalfi/Light_UserData/blob/master/doc/pages/conception-notes.md\n         * If true, the reset action of the [file manager protocol](https://github.com/lingtalfi/TheBar/blob/master/discussions/file-manager-protocol.md)\n         * will be sent when the widget is first initialized, or when the wrapping form (if any) is reset.\n         *\n         * Also, when the wrapping form is submitted, this widget will trigger the \"commit\" action\n         * on the server.\n         *\n         * Also, when accessing a file by its url, we add the v=1 flag, as recommended by the file manager protocol.\n         *\n         */\n        useVirtualServer: false,\n\n        /**\n         * bool=false.\n         * Whether to show the delete button on uploaded files.\n         */\n        useDelete: false,\n\n\n        /**\n         * bool=false.\n         * Whether to use the keepOriginalUrl system of the [file manager protocol](https://github.com/lingtalfi/TheBar/blob/master/discussions/file-manager-protocol.md).\n         * If true, when the file is uploaded, this widget also sends the keep_original flag to the server.\n         * Also, it displays and handles the behaviour of a show original toggle button, so that the user can revert back to the original image if necessary.\n         * Note: every time the user uploads a new file, the keep_original flag is resent to the server (so that the original image is the last image\n         * uploaded by the user).\n         */\n        useKeepOriginalImage: false,\n\n        /**\n         * bool=false.\n         * Whether to show the open file editor dialog button.\n         */\n        useFileEditor: false,\n        /**\n         * map={}.\n         * The options for the file editor.\n         */\n        fileEditor: {\n\n            //----------------------------------------\n            // file\n            //----------------------------------------\n            /**\n             * bool=false.\n             * Whether the user can update the file extension.\n             */\n            fileExtensionCanBeUpdated: false,\n\n\n            //----------------------------------------\n            // directory\n            //----------------------------------------\n            /**\n             * bool=false.\n             * Whether to show the directory control.\n             */\n            useDirectory: false,\n\n            /**\n             * string=\"\".\n             * The default value of the directory control.\n             */\n            directory: \"\",\n            /**\n             *\n             * bool=true.\n             * Whether the directory can be updated.\n             * It's generally a good idea to let the directory not fixed to a certain value,\n             * as to sync the server with the gui,\n             * as the server might change the directory defined by the user.\n             */\n            directoryCanBeUpdated: true,\n\n            //----------------------------------------\n            // visibility\n            //----------------------------------------\n            /**\n             * bool=false.\n             * Whether to show the visibility checkbox (private/public).\n             */\n            usePrivacy: false,\n\n            //----------------------------------------\n            // tags\n            //----------------------------------------\n            /**\n             * bool=false.\n             * Whether to show the tags control.\n             */\n            useTags: false,\n\n            /**\n             * bool=true.\n             * Whether the user is allowed to create new tags.\n             */\n            allowCustomTags: true,\n            /**\n             * array=[].\n             *\n             * The array of tag names the user can choose from.\n             *\n             * Note: if allowCustomTags is true, the user can create his own tags,\n             * otherwise his choice must be one of the available tags.\n             *\n             */\n            availableTags: [],\n            /**\n             * int=5.\n             * The number of tags the user can select/create.\n             * This cannot be infinite.\n             */\n            nbTagsAllowed: 5,\n\n            /**\n             * bool=false.\n             * Whether to show the image editor (if the file is an image).\n             */\n            useImageEditor: false,\n        },\n\n\n    }, options);\n\n    let uFileCounter = 1;\n    let testPartialSize = 0;\n    let inputName = options.name;\n    let isMultipleInput = false;\n    if (options.maxFile > 1) {\n        inputName += '[]';\n        isMultipleInput = true;\n    }\n\n    let hiddenAddFileBtn;\n    let elDropZone;\n    let elTextItemsContainer;\n    let elImageItemsContainer;\n\n\n    if (false === jsx.arrayKeyExists(options.lang, FileUploader._langs)) {\n        throw new Error(\"Lang not available: \" + options.lang);\n    }\n\n    let dictionary = FileUploader._langs[options.lang];\n\n    let translator = new Translatee();\n    translator.setDefaultLang(options.lang);\n    translator.addDictionary(options.lang, dictionary);\n    let validator = new Validator();\n    validator.setTranslator(translator);\n    validator.init(options);\n    let globalProgressTracker = new GlobalProgressTracker();\n    let chunkUploader = null;\n\n\n    //----------------------------------------\n    // HTML THEME\n    //----------------------------------------\n    let styleBtnAddFile = 'btn-add-file';\n    let styleBtnStartUpload = 'btn-start-upload';\n    let styleBtnViewText = 'btn-view-text';\n    let styleBtnViewImage = 'btn-view-image';\n    if (true === options.useBootstrap) {\n        styleBtnAddFile += ' btn btn-outline-dark btn-sm';\n        styleBtnStartUpload += ' btn btn-outline-dark btn-sm';\n        styleBtnViewText += ' btn btn-info btn-sm';\n        styleBtnViewImage += ' btn btn-info btn-sm';\n    }\n\n\n    //----------------------------------------\n    // STATE\n    //----------------------------------------\n    /**\n     * each uFile:\n     *\n     * - id: string, the file id\n     * - url: string=null, the file url. Note: if a file is dragged or selected via input, it doesn't have url yet.\n     *\n     * - directory: false|string.\n     *      The default value depends on the configuration of this component (see the doc for more info).\n     *      the base directory used for this file. This is used by some protocols.\n     *      false means that the directory is not used at all (the user can't define one).\n     *\n     *\n     * - name: string, the relative file path, from the base directory.\n     *\n     * - status: int=0\n     *      The status of the file. Can be one of:\n     *      - 0: initialized at startup (when the page refreshed), but the meta/blob are not ready (they need to be fetched from the server)\n     *      - 1: same as 0, but the meta/blob are ready\n     *      - 2: added by the user but not uploaded yet (url=null)\n     *      - 3: added by the user and uploaded\n     *\n     *\n     * - file: the js File object. This is not available with status=0.\n     * - is_private: bool=false, whether the file is private or public\n     * - is_user_data: bool=false\n     *      experimental flag...\n     *\n     * - progress: the current percentage of the file loaded (for progress bar live display)\n     * - tags: array of tags associated with this file\n     * - keep_original: 0|1=0.\n     *      A flag to indicate to the server whether to keep this file as an original source (to recall later).\n     *      See more info in the properties description of this widget.\n     *\n     * - is_loading: bool=false.\n     *      If true, a loader shall appear in the file item to indicate that an ajax action is pending in the background.\n     *\n     *\n     */\n    let uFiles = [];\n    let editedUFile = null;\n    let viewMode = 'image';\n    let fileEditorIsOpen = false;\n    let globalPercent = 0;\n    let abortBtnVisible = false;\n    let userErrors = [];\n    let fileEditorErrors = [];\n    let urls = options.urls;\n\n    // global percent text transition vars\n    let aIsVisible = true;\n    let bIsVisible = false;\n\n    $: totalSize = getTotalSize(uFiles);\n    $: nbQueuedFiles = getNbQueuedFiles(uFiles);\n    $: startUploadBtnEnabled = (false === options.immediateUpload && nbQueuedFiles > 0);\n\n\n    //----------------------------------------\n    // LIFE CYCLE\n    //----------------------------------------\n    onMount(async () => {\n\n\n        //----------------------------------------\n        // DROPZONE\n        //----------------------------------------\n        let dropZoneHandler = new DropZoneHandler({\n            container: elDropZone,\n            cssClass: options.dropzoneOverClass,\n            onDrop: (files) => {\n                addUserFiles(files);\n            },\n        });\n        dropZoneHandler.start();\n\n\n        //----------------------------------------\n        // DRAGULA\n        //----------------------------------------\n        let drakeImg = dragula([elImageItemsContainer]);\n        let drakeText = dragula([elTextItemsContainer]);\n        drakeImg.on('drop', () => {\n            let ids = getCurrentOrder(elImageItemsContainer);\n            updateUFileOrder(ids);\n        });\n\n\n        drakeText.on('drop', () => {\n            let ids = getCurrentOrder(elTextItemsContainer);\n            updateUFileOrder(ids);\n        });\n\n\n        //----------------------------------------\n        // VIRTUAL FILE SYSTEM\n        //----------------------------------------\n        if (true === options.useVirtualServer) {\n            await reset();\n\n            let dForm = elDropZone.closest('form');\n            if (null !== dForm) {\n                dForm.addEventListener('reset', async () => {\n                    await reset();\n                });\n            }\n\n\n        } else {\n            resetUrls();\n        }\n\n    });\n\n    //----------------------------------------\n    // CONTEXT\n    //----------------------------------------\n    setContext(\"fileUploader\", {\n        onCloseFileEditorBtnClicked: closeFileEditor,\n        onFileEditorFileDropped: updateUFileBinaryData,\n        onFileEditorUpdated: updateUFileByFileEditor,\n        fileEditorOptions: Object.assign(options.fileEditor, {\n            dropzoneOverClass: options.dropzoneOverClass,\n            useKeepOriginalImage: options.useKeepOriginalImage,\n            useBootstrap: options.useBootstrap,\n        }),\n    });\n\n    //----------------------------------------\n    // FUNCTIONS\n    //----------------------------------------\n    function changeViewMode(mode) {\n        viewMode = mode;\n    }\n\n\n    /**\n     * Returns an uFile from the given js File.\n     *\n     * At its minimum, the uFile has the following properties:\n     * - id\n     * - url\n     * - status\n     * - directory\n     * - name\n     *\n     */\n    function createUFile(oFile, _options) {\n\n        // null means do not display it at all\n        let feo = options.fileEditor;\n        let directory = '';\n\n\n        if ('tags' in options) {\n            while (options.tags.length > feo.nbTagsAllowed) {\n                options.tags.pop();\n            }\n        }\n\n\n        return jsx.extend({\n            id: getNewFileId(),\n            url: null,\n            name: oFile.name,\n            directory: feo.directory,\n            file: oFile,\n            status: 0,\n            size: oFile.size,\n            type: oFile.type,\n            progress: 0,\n            is_private: false,\n            is_user_data: false,\n            tags: [],\n            keep_original: jsx.toInt(options.useKeepOriginalImage),\n            is_loading: false,\n        }, _options);\n    }\n\n    function getNewFileId() {\n        return 'id' + uFileCounter++;\n    }\n\n    function addUFile(uFile) {\n        uFiles = [...uFiles, uFile];\n    }\n\n    function updateUFile(uFile) {\n        for (let i in uFiles) {\n            let curUFile = uFiles[i];\n            if (uFile.id === curUFile.id) {\n                uFiles[i] = uFile;\n                break;\n            }\n        }\n    }\n\n\n    function updateUFileBinaryData(uFile, oFile) {\n\n\n        let res = validator.test(oFile);\n        if (true === res) {\n            uFile.file = oFile;\n            uFile.size = oFile.size;\n            uFile.type = oFile.type;\n            uFile.name = oFile.name;\n            uFile.status = 2;\n\n            uFile.keep_original = jsx.toInt(options.useKeepOriginalImage);\n\n            // special internal flag\n            uFile.__preserveOriginalUrl = true;\n\n\n            editedUFile = uFile;\n            updateUFile(uFile);\n\n\n            if (true === options.immediateUpload) {\n                setTimeout(async function () {\n\n\n                    try {\n\n                        await uploadQueuedFiles({\n                            action: \"update\",\n                            url: uFile.url,\n                            original_url: uFile.original_url,\n                        });\n\n                    } catch (e) {\n                        /**\n                         * It was annoying me, while debugging, when there was an upload error to be stuck on the loading gif image (because\n                         * then the gui underneath disappear).\n                         * So setting is_loading to false makes the loading gif image disappear, and allows me to continue uploading files,\n                         * even if an error occurred.\n                         **/\n                        uFile.is_loading = false;\n                        updateUFile(uFile);\n                    }\n\n\n                    let updatedEditedFile = _getUFileById(editedUFile.id);\n                    editedUFile = updatedEditedFile;\n\n                }, 1);\n            }\n\n        } else {\n            addFileEditorError(res);\n        }\n    }\n\n\n    async function updateUFileByFileEditor(uFile, postedData, flags) {\n\n\n        let {cropped, dropped, original} = flags;\n\n        uFile.is_loading = true;\n        editedUFile = uFile;\n\n        let fileHasChanged = (true === cropped || true === dropped || true === original);\n        uFile.keep_original = jsx.toInt((true === dropped && false === original && false === cropped));\n\n        let isExternalUrl = options.isExternalUrl(uFile.url);\n\n\n        uFile = jsx.extend(uFile, postedData);\n\n        let newUFile;\n        if (true === isExternalUrl || true === fileHasChanged) {\n            abortBtnVisible = true;\n            newUFile = await uploadFile(uFile, {\n                action: \"update\",\n                url: uFile.url,\n            }, {\n                singleFile: true,\n            });\n            abortBtnVisible = false;\n            refreshGlobalPercentText();\n        } else {\n\n            var data = jsx.extend({}, options.payload, {\n                action: 'update',\n                url: uFile.url,\n                filename: uFile.name,\n                directory: uFile.directory,\n                tags: uFile.tags,\n                is_private: jsx.toInt(uFile.is_private),\n            });\n\n            let jsonResponse = await callService(data);\n\n            newUFile = await handleAddUpdateResponse(uFile, jsonResponse);\n\n            /**\n             * Preserving the old data since we didn't send the file (to save cpu work)\n             */\n            newUFile.file = uFile.file;\n            newUFile.original_url = uFile.original_url;\n            newUFile.type = uFile.type;\n            newUFile.size = uFile.size;\n\n        }\n\n\n        if (false !== newUFile) {\n            newUFile.is_loading = false;\n            updateUFile(newUFile);\n        }\n    }\n\n\n    async function removeUFile(id, serverCheck = true) {\n        for (let i in uFiles) {\n            let uFile = uFiles[i];\n            if (id === uFile.id) {\n\n                if (\n                    true === serverCheck &&\n                    false === options.isExternalUrl(uFile.url)\n                ) {\n\n                    uFile.is_loading = true;\n                    uFiles = uFiles;\n\n\n                    let response = await callService({\n                        \"action\": \"delete\",\n                        \"url\": uFile.url,\n                    });\n                    uFile.is_loading = false;\n                    if (true === checkAcpResponse(response)) {\n                        jsx.removeEntryByIndex(uFiles, i);\n                        uFiles = uFiles;\n                        break;\n                    }\n                } else {\n                    jsx.removeEntryByIndex(uFiles, i);\n                    uFiles = uFiles;\n                    break;\n                }\n\n            }\n        }\n    }\n\n\n    /**\n     * Used at startup, to initialize the widget with some default urls.\n     */\n    function loadUrl(url) {\n\n\n        let originalUrl = url;\n        let fileName = url.split(\"/\").pop();\n        let fileId = getNewFileId();\n        let uFile = {\n            id: fileId,\n            status: 0,\n            url: url,\n            name: fileName,\n        };\n        addUFile(uFile);\n\n        if (true === options.useFileEditor) {\n            url = jsx.url_merge_params(url, {\n                \"m\": 1\n            });\n        }\n\n\n        fetch(url).then(response => {\n            if (response.ok) {\n                response.blob().then(blob => {\n\n                    /**\n                     * create the uFile\n                     */\n                    let file = blobToFile(blob, fileName);\n\n\n                    let moreHeaders = {};\n                    if (true === options.useFileEditor) {\n                        moreHeaders = panda.getPandaHeaders(response.headers);\n                    }\n\n                    let updatedUFile = createUFile(file, jsx.extend(moreHeaders, {\n                        status: 1,\n                        url: originalUrl,\n                        id: uFile.id\n                    }));\n                    updateUFile(updatedUFile);\n                });\n\n            } else {\n                addServerError(`An error occurred with the request for url ${url}. ` + response.status + ': ' + response.statusText);\n            }\n        });\n\n    }\n\n    function blobToFile(blob, name) {\n        // https://stackoverflow.com/questions/27159179/how-to-convert-blob-to-file-in-javascript\n        blob.lastModifiedDate = new Date();\n        blob.name = name;\n        return blob;\n    }\n\n\n    function getTotalSize(_uFiles) {\n        let total = 0;\n        _uFiles.forEach(uFile => {\n            if (uFile.size) {\n                total += uFile.size;\n            }\n        })\n        return total;\n    }\n\n\n    function getNbQueuedFiles(_uFiles) {\n        let total = 0;\n        _uFiles.forEach(uFile => {\n            if (2 === uFile.status) {\n                total++;\n            }\n        })\n        return total;\n    }\n\n\n    async function addUserFiles(files) {\n        hiddenAddFileBtn.disabled = true;\n\n\n        var numFiles = files.length;\n        for (let i = 0; i < numFiles; i++) {\n\n            let oFile = files[i];\n\n\n            let res = validator.test(oFile);\n            if (true === res) {\n                let uFile = createUFile(oFile, {\n                    status: 2,\n                });\n                addUFile(uFile);\n                await applyFileRotation();\n            } else {\n                addUserError(res);\n            }\n        }\n\n        if (true === options.immediateUpload) {\n            setTimeout(function () {\n                uploadQueuedFiles();\n            }, 1);\n        }\n\n\n    }\n\n    async function applyFileRotation() {\n        if (-1 !== options.maxFile && uFiles.length > options.maxFile) {\n            let nbFilesToRemove = uFiles.length - options.maxFile;\n            while (nbFilesToRemove > 0) {\n                nbFilesToRemove--;\n                let uFile = uFiles[0];\n                await removeUFile(uFile.id);\n            }\n        }\n\n    }\n\n    function onAddFileButtonClicked() {\n        hiddenAddFileBtn.disabled = false;\n        hiddenAddFileBtn.click();\n    }\n\n\n    function addUserError(err) {\n        if (true === fileEditorIsOpen) {\n            addFileEditorError(err);\n        } else {\n            userErrors = [...userErrors, err];\n        }\n    }\n\n    function addFileEditorError(err) {\n        fileEditorErrors = [...fileEditorErrors, err];\n    }\n\n    function removeErrorItem(e) {\n        let el = e.target.closest(\".error-item\");\n        if (null !== el) {\n            el.remove();\n        }\n    }\n\n\n    function getCurrentOrder(container, key = 'id') {\n        let ret = [];\n        let children = container.children;\n        for (let child of children) {\n            let attrName = \"data-\" + key;\n\n            let id = child.getAttribute(attrName);\n            if (id) {\n                ret.push(id);\n            } else {\n                throw new Error(\"No element found with attribute \" + attrName + \". This is a setup error, please fix it now.\");\n            }\n        }\n\n        return ret;\n    }\n\n    function updateUFileOrder(ids) {\n        let newUFiles = [];\n        let tmpUFiles = {};\n        uFiles.forEach(uFile => {\n            tmpUFiles[uFile.id] = uFile;\n        });\n        ids.forEach(id => {\n            newUFiles.push(tmpUFiles[id]);\n        });\n        uFiles = newUFiles;\n    }\n\n    /**\n     * Returns the [acp](https://github.com/lingtalfi/AjaxCommunicationProtocol) json response from the server.\n     *\n     */\n    async function callService(payload, returnOriginalResponse = false) {\n\n        payload = jsx.extend({}, options.payload, payload);\n\n        var response = await jsx.post(options.serverUrl, payload).catch(reason => {\n            var errMsg = \"An error occurred with the request: \" + reason;\n            addServerError(errMsg);\n        });\n        if (true === response.ok) {\n            if (true === returnOriginalResponse) {\n                return response;\n            }\n            return await response.json().catch((e) => {\n                addUserError(e.toString());\n            });\n        } else {\n            addServerError(\"The server status code was \" + response.status);\n        }\n    }\n\n    async function reset() {\n\n\n        var response = await callService({\n            \"action\": \"reset\",\n        });\n\n        if (true === checkAcpResponse(response)) {\n            resetUrls();\n            return true;\n        }\n        return false;\n    }\n\n\n    function checkAcpResponse(response) {\n        if (true === isSuccessfulResponse(response)) {\n            return true;\n        } else {\n            addServerError(response.error);\n            return false;\n        }\n    }\n\n    function isSuccessfulResponse(jsonResponse) {\n        if (jsx.isPlainObject(jsonResponse) && \"type\" in jsonResponse) {\n            if ('success' === jsonResponse.type) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    function addServerError(err) {\n        addUserError(err);\n    }\n\n    function abort() {\n        if (null !== chunkUploader) {\n            chunkUploader.abort();\n            refreshGlobalPercentText();\n        }\n    }\n\n    function resetUrls() {\n        uFiles = [];\n        let x = options.maxFile;\n        urls.forEach(url => {\n            if (x > 0) {\n                loadUrl(url);\n                x--;\n            }\n        });\n    }\n\n    async function uploadQueuedFiles(params = {}) {\n\n        if (nbQueuedFiles > 0) {\n\n            abortBtnVisible = true;\n\n            globalProgressTracker.registerItems(uFiles);\n\n            for (let [i, uFile] of uFiles.entries()) {\n\n                let fileId = uFile.id;\n                if (2 === uFile.status) {\n\n\n                    uFile.is_loading = true;\n                    uFiles = uFiles;\n\n                    /**\n                     * Note that the process will not go beyond this line if the user\n                     * aborts the chunk upload.\n                     */\n                    let newUFile = await uploadFile(uFile, params);\n\n\n                    if (false !== newUFile) {\n\n                        newUFile.is_loading = false;\n                        // update the file\n                        uFiles[i] = newUFile;\n\n                    } else {\n                        removeUFile(fileId, false);\n                    }\n                }\n            }\n\n            abortBtnVisible = false;\n            refreshGlobalPercentText();\n\n\n        }\n\n    }\n\n\n    /**\n     * Returns a promise that resolves to either:\n     *\n     * - uFile: the uFile corresponding to the successfully uploaded file, based on the given uFile\n     * - false (bool): in case of error\n     *\n     */\n    async function uploadFile(uFile, params = {}, _options = {}) {\n\n        let useChunks = true;\n        let jsonResponse = null;\n\n        let singleFile = _options['singleFile'] || false;\n\n\n        var data = jsx.extend({}, options.payload, {\n            action: 'add',\n            filename: uFile.name,\n            directory: uFile.directory,\n            tags: uFile.tags,\n            is_private: jsx.toInt(uFile.is_private),\n            keep_original: jsx.toInt(uFile.keep_original),\n        }, params);\n\n\n        // make sure you don't keep original for non images.\n        if (false === jsx.mimeIsImage(uFile.type)) {\n            data.keep_original = 0;\n        }\n\n\n        //----------------------------------------\n        // USING CHUNKS (always a better idea)\n        //----------------------------------------\n        if (true === useChunks) {\n            data.useChunks = 1;\n\n            chunkUploader = new ChunkUploader({\n                serverUrl: options.serverUrl,\n                // chunkSize: 5 * 1024 * 1024,\n                onChunkAborted: (start, end, isLastChunk) => {\n                    abortUpload(uFile);\n                },\n                onChunkLoaded: (start, end, size, isLastChunk) => {\n                    let percent = Math.round(end / size * 100, 2);\n                    let id = uFile.id;\n                    if (false === singleFile) {\n                        globalProgressTracker.addProgress(id, percent);\n                        globalPercent = globalProgressTracker.getPercent().toFixed(2);\n                    } else {\n                        globalPercent = percent;\n                    }\n                    updateUFileProgress(id, percent);\n                },\n                onChunkResponseReceived: async function (response) {\n                    try {\n                        jsonResponse = await response.json();\n                        if (true === isSuccessfulResponse(jsonResponse)) {\n                            return true;\n                        } else {\n                            return jsonResponse.error;\n                        }\n                    } catch (e) {\n                        return e.toString();\n                    }\n                }\n            });\n\n            try {\n\n                let response = await chunkUploader.sendByChunks(uFile.file, data, {\n                    start: testPartialSize,\n                });\n                jsonResponse = await response.json();\n\n            } catch (e) {\n                jsonResponse = {\n                    type: \"error\",\n                    error: e,\n                };\n            }\n        } else {\n            //----------------------------------------\n            // USING REGULAR UPLOAD\n            //----------------------------------------\n            data[options.uploadItemName] = uFile.file;\n            let ajax = await jsx.uploadFileProgress(options.serverUrl, data, (e, percent, loaded, total) => {\n\n                let id = uFile.id;\n                globalProgressTracker.addProgress(id, percent);\n                globalPercent = globalProgressTracker.getPercent().toFixed(2);\n                updateUFileProgress(id, percent);\n\n            });\n\n\n            jsonResponse = JSON.parse(ajax.response);\n        }\n\n        return await handleAddUpdateResponse(uFile, jsonResponse);\n\n    }\n\n    async function handleAddUpdateResponse(uFile, jsonResponse) {\n        if (true === checkAcpResponse(jsonResponse)) {\n\n            // eliminate conflict of ajaxCommunicationProtocol.type (success|error) and our uFile.type (mime type)\n            delete jsonResponse.type;\n\n\n            if (true === uFile.__preserveOriginalUrl) {\n                /**\n                 * Needed this in the case of an update, using the virtual server, which didn't know the original url\n                 * and returned original_url=null, but we want to keep the old original url (since the vfs doesn't\n                 * know anything about whether the real original url exists or not).\n                 */\n                let originalUrl = uFile.original_url;\n                uFile = jsx.extend(uFile, jsonResponse);\n                uFile.original_url = originalUrl;\n                delete uFile.__preserveOriginalUrl;\n            } else {\n                uFile = jsx.extend(uFile, jsonResponse);\n            }\n\n\n            if (true === jsx.mimeIsImage(uFile.type)) {\n                /**\n                 * We download the blob so that we can update the image (if ever the server changed it).\n                 * Note that the server might not alter any other type of files, just images.\n                 */\n                let fileUrl = uFile.url;\n                if (true === options.useVirtualServer) {\n                    fileUrl += '&v=1';\n                }\n\n                let blob = await jsx.fetchBlob(fileUrl);\n                uFile.file = blob;\n                uFile.size = blob.size;\n                uFile.type = blob.type;\n            }\n\n\n            /**\n             * Note: the server's response will at least contain the url.\n             * In the case of the fileManager protocol, it might have other properties as well, such\n             * as:\n             * - name (will override current uFile name)\n             * - directory\n             *\n             */\n            uFile.status = 3;\n\n            if (null !== uFile.original_url) {\n\n                if (true === options.useVirtualServer) {\n                    uFile.original_url = jsx.url_merge_params(uFile.original_url, {v: 1});\n                }\n                uFile.keep_original = 0;\n            }\n\n\n            return uFile;\n        }\n        return false;\n    }\n\n\n    function updateUFileProgress(id, percent) {\n\n        let bk = 2;\n\n        for (let i in uFiles) {\n            let uFile = uFiles[i];\n            if (id === uFile.id) {\n                uFile.progress = percent;\n                uFiles = uFiles;\n                bk--;\n                if (0 === bk) {\n                    break;\n                }\n            }\n\n            if (null !== editedUFile && id === editedUFile.id) {\n                editedUFile.progress = percent; // redundant? but seems to be required\n                editedUFile = editedUFile;\n                bk--;\n                if (0 === bk) {\n                    break;\n                }\n            }\n\n        }\n    }\n\n    function abortUpload(uFile) {\n        removeUFile(uFile.id)\n    }\n\n    function openFileEditor(id) {\n        let uFile = _getUFileById(id);\n        editedUFile = uFile;\n        fileEditorIsOpen = true;\n    }\n\n    function closeFileEditor() {\n        fileEditorIsOpen = false;\n    }\n\n\n    function refreshGlobalPercentText() {\n        setTimeout(() => {\n            if (true === aIsVisible) {\n                aIsVisible = false;\n                setTimeout(() => {\n                    globalPercent = 0;\n                    abortBtnVisible = false;\n                    bIsVisible = true;\n                }, 500);\n            } else {\n                bIsVisible = false;\n                setTimeout(() => {\n                    globalPercent = 0;\n                    abortBtnVisible = false;\n                    aIsVisible = true;\n                }, 500);\n            }\n        }, 2000);\n    }\n\n    //----------------------------------------\n    //\n    //----------------------------------------\n    function _getUFileById(id) {\n        for (let uFile of uFiles) {\n            if (id === uFile.id) {\n                return uFile;\n            }\n        }\n        throw new Error(\"uFile not found with id: \" + id);\n    }\n\n    // function testLoader(id) {\n    //     for (let i in uFiles) {\n    //         let uFile = uFiles[i];\n    //         if (id === uFile.id) {\n    //             uFile.is_loading = true;\n    //             uFiles = uFiles;\n    //             break;\n    //         }\n    //     }\n    // }\n\n\n</script>\n\n\n<div class=\"fileuploader-container\">\n    <div class=\"hidden-inputs\" style=\"display: none\">\n        {#each uFiles as uFile (uFile.id)}\n            <input type=\"text\" readOnly name={inputName} value={uFile.url}/>\n        {/each}\n    </div>\n    <div class=\"error-container\">\n        <div class=\"error-container-item\">\n            {#each userErrors as userError}\n                <div class=\"error-item\">\n                    <span>{@html userError}</span>\n                    <button on:click|preventDefault={removeErrorItem} class=\"btn-remove-error\"><i\n                            class=\"fas fa-times-circle btn-remove-error\"></i></button>\n                </div>\n            {/each}\n        </div>\n    </div>\n    <div class=\"header\">\n        <div class=\"left\">{translator._(\"Select files\")}</div>\n        <div class=\"right\">\n            <button on:click|preventDefault={() => changeViewMode(\"text\")}\n                    class={styleBtnViewText}\n\n            ><i\n                    class=\"fas fa-list-ul btn-view-text\"></i></button>\n            <button on:click|preventDefault={() => changeViewMode(\"image\")} class={styleBtnViewImage}><i\n                    class=\"far fa-image btn-view-image\"></i></button>\n        </div>\n    </div>\n    <div class=\"dropzone\" bind:this={elDropZone}>\n        <div class=\"dropzone-text\" class:visible={\"text\"===viewMode}>\n            <div class=\"dropzone-text-header\">\n                <div class=\"cell-name\">{translator._(\"Filename\")}</div>\n                <div class=\"cell-status\">{translator._(\"Status\")}</div>\n                <div class=\"cell-size\">{translator._(\"Size\")}</div>\n                <div class=\"cell-action\"></div>\n            </div>\n            <div class=\"dropzone-text-container\">\n                <div class=\"dropzone-droptext\">{translator._(\"Drag files here.\")}</div>\n                <ul class=\"fileuploader-item-container\" bind:this={elTextItemsContainer}>\n                    {#each uFiles as uFile (uFile.id)}\n\n                        {#if 0 === uFile.status}\n                            <li class=\"dropzone-text-item-container fileuploader-item ui-placeholder\"\n                                data-id=\"{uFile.id}\">\n                                <div class=\"cell-name\">{uFile.name}</div>\n                                <div class=\"cell-status\">{translator._(\"Loading...\")}</div>\n                                <div class=\"cell-size\">&nbsp</div>\n                                <div class=\"cell-action gu-hide\">&nbsp;</div>\n                            </li>\n                        {:else}\n                            <li class=\"dropzone-text-item-container fileuploader-item\" data-id=\"{uFile.id}\">\n                                <div class=\"cell-name\">\n                                    {uFile.name}\n                                    {#if true === uFile.is_loading}\n                                        <i class=\"fas fa-circle-notch fa-spin\"></i>\n                                    {/if}\n                                </div>\n                                <div class=\"cell-status\">\n                                    {#if uFile.status < 2}\n                                        -\n                                    {:else}\n                                        {uFile.progress}%\n                                    {/if}\n\n                                </div>\n                                <div class=\"cell-size\">{jsx.humanSize(uFile.size)}</div>\n                                <div class=\"cell-action gu-hide\">\n                                    {#if true === options.useFileEditor}\n                                        <button on:click|preventDefault={() => openFileEditor(uFile.id)}\n                                                class=\"btn-edit-file\"><i\n                                                class=\"btn-edit-file fas fa-edit\"></i></button>\n                                    {/if}\n                                    {#if true === options.useDelete}\n                                        <button on:click|preventDefault={() => removeUFile(uFile.id)}\n                                                class=\"btn-remove-file\"><i\n                                                class=\"fas fa-minus-circle btn-remove-file\"></i>\n                                        </button>\n                                    {/if}\n                                </div>\n                            </li>\n                        {/if}\n                    {/each}\n                </ul>\n            </div>\n        </div>\n        <div class=\"dropzone-image\" class:visible={\"image\"===viewMode}>\n            <div class=\"dropzone-droptext\">{translator._(\"Drag files here.\")}</div>\n            <div class=\"filelist fileuploader-item-container\" bind:this={elImageItemsContainer}>\n                {#each uFiles as uFile (uFile.id)}\n\n                    {#if 0 === uFile.status}\n                        <div class=\"dropzone-image-item-container fileuploader-item\"\n                             data-id={uFile.id}>\n                            <div class=\"cell-content\">\n                                <div class=\"cell-image\">\n                                    <span class=\"cell-image-img\">\n<!--                                        <i class=\"fas fa-circle-notch fa-spin loading-image\"></i>-->\n                                    </span>\n                                </div>\n                                <div class=\"cell-name\">{uFile.name}</div>\n                                <div class=\"cell-size\"></div>\n                            </div>\n                            <div class=\"image-overlay\">\n                                <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>\n                            </div>\n                        </div>\n                    {:else}\n                        <div class=\"dropzone-image-item-container fileuploader-item\" data-id={uFile.id}>\n                            <div class=\"cell-content\">\n                                <div class=\"cell-image\">\n                                    {#if true === jsx.mimeIsImage(uFile.type)}\n                                        <img class=\"cell-image-img\" src={URL.createObjectURL(uFile.file)}\n                                             alt={uFile.name}/>\n                                    {:else}\n                                        <span class=\"cell-image-img\"><i class=\"far fa-file\"></i></span>\n                                    {/if}\n                                </div>\n                                <div class=\"cell-name\">{uFile.name}</div>\n                                <div class=\"cell-size\">{jsx.humanSize(uFile.size)}</div>\n                            </div>\n                            <div class=\"cell-action gu-hide\">\n                                {#if true === options.useFileEditor}\n                                    <button on:click|preventDefault={() => openFileEditor(uFile.id)}\n                                            class=\"btn-edit-file\"><i\n                                            class=\"btn-edit-file fas fa-edit\"></i></button>\n                                {/if}\n                                {#if true === options.useDelete}\n                                    <button on:click|preventDefault={() => removeUFile(uFile.id)}\n                                            class=\"btn-remove-file\"><i\n                                            class=\"fas fa-minus-circle btn-remove-file\"></i>\n                                    </button>\n                                {/if}\n                            </div>\n                            {#if true === uFile.is_loading}\n                                <div class=\"image-overlay\">\n                                    <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>\n                                </div>\n                            {/if}\n                        </div>\n                    {/if}\n                {/each}\n\n            </div>\n        </div>\n    </div>\n    <div class=\"footer\">\n        <div class=\"left\">\n            <button on:click|preventDefault={onAddFileButtonClicked}\n                    class={styleBtnAddFile}\n            ><i\n                    class=\"btn-add-file fas fa-plus-circle\"></i> <span\n                    class=\"btn-add-file\">{\n                0 === nbQueuedFiles ?\n                    translator._(\"Add files\") :\n                    translator._n(\"x files queued\", nbQueuedFiles)\n            }\n\n                </span>\n            </button>\n            {#if false === options.immediateUpload}\n                <button on:click|preventDefault={uploadQueuedFiles}\n                        class={styleBtnStartUpload}\n                        disabled={!startUploadBtnEnabled}><i\n                        class=\"btn-start-upload fas fa-arrow-circle-right\"></i> <span\n                        class=\"btn-start-upload\">{translator._(\"Start upload\")}</span></button>\n            {/if}\n        </div>\n        <div class=\"right\">\n            <span class=\"footer-info\"><span class=\"text-file\">{translator._n(\"x files\", uFiles.length)}</span></span>\n            <span class=\"footer-info global-percent-upload\">\n                {#if true === aIsVisible}\n                    <span transition:fade>{globalPercent}%</span>\n                {/if}\n                {#if true === bIsVisible}\n                    <span transition:fade>{globalPercent}%</span>\n                {/if}\n            </span>\n            <button on:click|preventDefault={abort} class=\"btn-abort-upload\"\n                    style=\"display: {abortBtnVisible?'inline-block':'none'}\">\n                <i\n                        class=\"fas fa-ban btn-abort-upload\"></i> {translator._(\"Abort\")}\n            </button>\n            <span class=\"footer-info global-size\">\n                {jsx.humanSize(totalSize)}\n            </span>\n        </div>\n    </div>\n    <div class=\"hidden\" style=\"display: none\">\n        <input bind:this={hiddenAddFileBtn} on:change={(e) => addUserFiles(e.target.files)}\n               class=\"input-file\"\n               disabled\n               type=\"file\" name={inputName}\n               multiple={isMultipleInput}\n        />\n    </div>\n\n\n</div>\n\n\n<FileEditor isOpen={fileEditorIsOpen} uFile={editedUFile} errors={fileEditorErrors}></FileEditor>\n\n\n<style type=\"text/sass\" lang=\"scss\">.fileuploader-container {\n  position: relative;\n  border: 1px solid #999; }\n  .fileuploader-container .hidden-inputs input {\n    display: block;\n    width: 100%; }\n  .fileuploader-container button {\n    cursor: pointer; }\n    .fileuploader-container button.btn-start-upload:disabled {\n      cursor: not-allowed; }\n  .fileuploader-container .error-container {\n    color: #cd0a0a;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    z-index: 1; }\n    .fileuploader-container .error-container .error-container-item {\n      position: relative;\n      height: 100%; }\n      .fileuploader-container .error-container .error-container-item .error-item {\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        border: 1px solid #cd0a0a;\n        background: #ffe8e8;\n        padding: 10px;\n        background: linear-gradient(0deg, #ffe8e8 46%, #ffefef 56%, #ffefef 63%); }\n        .fileuploader-container .error-container .error-container-item .error-item button.btn-remove-error {\n          position: absolute;\n          top: 4px;\n          right: 0px;\n          background: transparent;\n          border: none;\n          color: #cd0a0a;\n          cursor: pointer; }\n  .fileuploader-container .header {\n    background: #eee;\n    display: flex;\n    padding: 10px; }\n    .fileuploader-container .header .right {\n      margin-left: auto; }\n\n@keyframes placeholderShimmer {\n  0% {\n    background-position: -1200px 0; }\n  100% {\n    background-position: 1200px 0; } }\n  .fileuploader-container .ui-placeholder {\n    position: static;\n    overflow: hidden;\n    animation: placeholderShimmer 2s linear;\n    animation-iteration-count: infinite;\n    background-color: #fff;\n    background-image: linear-gradient(to right, rgba(0, 0, 0, 0.03) 0, rgba(0, 0, 0, 0.1) 50%, rgba(0, 0, 0, 0.03) 60%) !important;\n    background-size: 1200px 100% !important; }\n  .fileuploader-container .dropzone {\n    background: white;\n    min-height: 150px;\n    position: relative; }\n    .fileuploader-container .dropzone.dropzone-hover {\n      background: #fafafa; }\n    .fileuploader-container .dropzone .dropzone-text, .fileuploader-container .dropzone .dropzone-image {\n      display: none; }\n      .fileuploader-container .dropzone .dropzone-text.visible, .fileuploader-container .dropzone .dropzone-image.visible {\n        display: block; }\n    .fileuploader-container .dropzone .dropzone-text .dropzone-text-header {\n      display: flex;\n      padding: 10px;\n      background: #d1d1d1;\n      background: linear-gradient(0deg, #d1d1d1 0%, #e3e3e3 100%); }\n    .fileuploader-container .dropzone .dropzone-text .dropzone-text-item-container {\n      display: flex;\n      padding: 6px;\n      margin: 0;\n      position: relative;\n      z-index: 1;\n      background: #e4e4e4;\n      background: linear-gradient(0deg, #e4e4e4 46%, #eeeeee 56%); }\n    .fileuploader-container .dropzone .dropzone-text .cell-status {\n      margin-left: auto;\n      width: 80px; }\n    .fileuploader-container .dropzone .dropzone-text .cell-size {\n      width: 70px;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis; }\n    .fileuploader-container .dropzone .dropzone-text .cell-action {\n      width: 30px; }\n    .fileuploader-container .dropzone .dropzone-text .dropzone-text-container {\n      position: absolute;\n      top: 39px;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      overflow-y: auto;\n      font: normal 11px Verdana, sans-serif; }\n      .fileuploader-container .dropzone .dropzone-text .dropzone-text-container ul {\n        margin: 0;\n        padding: 0; }\n        .fileuploader-container .dropzone .dropzone-text .dropzone-text-container ul .cell-name {\n          padding-left: 10px; }\n        .fileuploader-container .dropzone .dropzone-text .dropzone-text-container ul button.btn-remove-file, .fileuploader-container .dropzone .dropzone-text .dropzone-text-container ul button.btn-edit-file {\n          border: none;\n          margin: 0;\n          padding: 0;\n          cursor: pointer;\n          color: #919191; }\n    .fileuploader-container .dropzone .dropzone-image .filelist {\n      display: flex;\n      flex-wrap: wrap;\n      position: absolute;\n      top: 0px;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      overflow-y: auto; }\n      .fileuploader-container .dropzone .dropzone-image .filelist .dropzone-image-item-container {\n        position: relative;\n        padding: 5px;\n        background: #f0f0f0;\n        margin: 5px;\n        max-width: 80px;\n        max-height: 120px;\n        overflow: hidden; }\n        .fileuploader-container .dropzone .dropzone-image .filelist .dropzone-image-item-container .cell-content .cell-image {\n          height: 80px;\n          text-align: center;\n          display: flex;\n          justify-content: center;\n          align-items: center; }\n          .fileuploader-container .dropzone .dropzone-image .filelist .dropzone-image-item-container .cell-content .cell-image img {\n            max-height: 80px;\n            max-width: 80px; }\n          .fileuploader-container .dropzone .dropzone-image .filelist .dropzone-image-item-container .cell-content .cell-image i {\n            color: #c2c2c2;\n            font-size: 80px; }\n            .fileuploader-container .dropzone .dropzone-image .filelist .dropzone-image-item-container .cell-content .cell-image i.loading-image {\n              font-size: 50px; }\n        .fileuploader-container .dropzone .dropzone-image .filelist .dropzone-image-item-container .cell-content .cell-name {\n          font: bold 11px Verdana, sans-serif; }\n        .fileuploader-container .dropzone .dropzone-image .filelist .dropzone-image-item-container .cell-content .cell-size {\n          font: normal 9px Verdana, sans-serif; }\n        .fileuploader-container .dropzone .dropzone-image .filelist .dropzone-image-item-container .cell-content .cell-status {\n          margin-top: 5px;\n          font-size: 0.8em;\n          text-align: center; }\n        .fileuploader-container .dropzone .dropzone-image .filelist .dropzone-image-item-container .cell-action {\n          position: absolute;\n          top: 1px;\n          right: 1px; }\n          .fileuploader-container .dropzone .dropzone-image .filelist .dropzone-image-item-container .cell-action button.btn-remove-file, .fileuploader-container .dropzone .dropzone-image .filelist .dropzone-image-item-container .cell-action button.btn-edit-file {\n            border: none;\n            margin: 0;\n            padding: 0;\n            cursor: pointer;\n            color: #919191;\n            background: transparent; }\n        .fileuploader-container .dropzone .dropzone-image .filelist .dropzone-image-item-container .image-overlay {\n          position: absolute;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background: rgba(0, 0, 0, 0.2);\n          display: flex;\n          justify-content: center;\n          align-items: center; }\n          .fileuploader-container .dropzone .dropzone-image .filelist .dropzone-image-item-container .image-overlay i {\n            color: white; }\n    .fileuploader-container .dropzone .dropzone-droptext {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: transparent;\n      text-align: center;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      font: normal 11px Verdana, sans-serif; }\n  .fileuploader-container .footer {\n    background: #eee;\n    display: flex;\n    padding: 10px; }\n    .fileuploader-container .footer .right {\n      margin-left: auto;\n      font: bold 11px Verdana, sans-serif;\n      color: #222; }\n      .fileuploader-container .footer .right .footer-info:not(:last-child) {\n        border-right: 1px solid #aaa;\n        padding-right: 7px;\n        margin-right: 7px; }\n\n/*------------------------------------\n  - DRAGULA\n  ------------------------------------*/\n:global(.gu-mirror) {\n  position: fixed !important;\n  margin: 0 !important;\n  z-index: 9999 !important;\n  opacity: 0.8;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=80)\";\n  filter: alpha(opacity=80); }\n  :global(.gu-mirror) img {\n    width: 80px;\n    height: 80px; }\n\n:global(.gu-unselectable) {\n  -webkit-user-select: none !important;\n  -moz-user-select: none !important;\n  -ms-user-select: none !important;\n  user-select: none !important; }\n  :global(.gu-unselectable) .gu-hide {\n    display: none !important; }\n\n:global(.gu-transit) {\n  opacity: 0.2;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=20)\";\n  filter: alpha(opacity=20); }\n</style>",
    "<script>\n    import {afterUpdate, getContext, onMount} from \"svelte\";\n    import {fade} from 'svelte/transition';\n    import MyModal from \"svelte-mymodal\";\n    import jsx from \"js-extension-ling\";\n    import Cropper from \"cropperjs\";\n    import DropZoneHandler from \"js-dropzone-handler\";\n\n\n    //----------------------------------------\n    // PROPS\n    //----------------------------------------\n    export let isOpen = false;\n    export let uFile = {};\n    export let title = \"FileEditor\";\n    export let errors = [];\n\n\n    //----------------------------------------\n    // STATE\n    //----------------------------------------\n    let useOriginalImageChecked = false;\n    let stateCpt = 0;\n\n\n    //----------------------------------------\n    // CONTEXT\n    //----------------------------------------\n    const {\n        onCloseFileEditorBtnClicked,\n        onFileEditorFileDropped,\n        onFileEditorUpdated,\n        fileEditorOptions,\n    } = getContext(\"fileUploader\");\n    const feo = fileEditorOptions;\n\n\n    //----------------------------------------\n    // HTML THEME\n    //----------------------------------------\n    let styleBtnCancel = 'btn-cancel';\n    let styleBtnUpdate = 'btn-update';\n    if (true === feo.useBootstrap) {\n        styleBtnCancel = 'btn btn-danger mr-2';\n        styleBtnUpdate = 'btn btn-success';\n    }\n\n\n    //----------------------------------------\n    // OTHER VARS\n    //----------------------------------------\n    let cssIdCounter = jsx.cssId();\n    let isImage = false;\n    let initialCropData = null;\n    let newDrop = false;\n    let originalBlob = null;\n    let pendingOriginalBlob = false;\n\n\n    //----------------------------------------\n    // JS LIBS STUFF\n    //----------------------------------------\n    let jDialog;\n    let jSelect;\n    let cropper = null;\n    let dropZoneHandler = null;\n\n\n    //----------------------------------------\n    // LIFECYCLE\n    //----------------------------------------\n    afterUpdate(() => {\n\n\n\n        if (true === isOpen) {\n\n\n            jDialog = jQuery(`#file-editor-dialog-${cssIdCounter}`);\n\n            //----------------------------------------\n            // TAGS\n            //----------------------------------------\n            if (true === feo.useTags) {\n                jSelect = jQuery(`#id-fileuploader-tags-${cssIdCounter}`);\n                let select2Options = {\n                    // multiple: true,\n                };\n                if (feo.availableTags.length > 0) {\n                    select2Options.data = _toSelect2Data(feo.availableTags);\n                }\n                if (true === feo.allowCustomTags) {\n                    select2Options[\"tags\"] = true;\n                }\n                select2Options[\"maximumSelectionLength\"] = feo.nbTagsAllowed;\n                jSelect.select2(select2Options);\n            }\n\n\n            //----------------------------------------\n            // IMAGE EDITOR\n            //----------------------------------------\n            isImage = jsx.mimeIsImage(uFile.type);\n            if (false === pendingOriginalBlob) {\n\n\n                if (true === isImage) {\n\n\n                    setTimeout(() => {\n\n\n                        let jImageOriginal = jDialog.find('.image-original');\n                        if (jImageOriginal.length) {\n\n                            let cropperImgRef = jImageOriginal[0];\n\n\n                            //----------------------------------------\n                            // CROPPER\n                            //----------------------------------------\n\n                            let theUrl;\n                            if (\n                                    true === useOriginalImageChecked &&\n                                    null !== originalBlob\n                            ) {\n                                theUrl = URL.createObjectURL(originalBlob);\n                            } else {\n                                theUrl = URL.createObjectURL(uFile.file);\n                            }\n\n                            cropperImgRef.src = theUrl;\n                            let cropperOptions = {\n                                preview: '.img-preview',\n                                viewMode: 1,\n                                autoCropArea: 1,\n                                ready() {\n                                    initialCropData = cropper.getData();\n                                },\n                            };\n\n\n                            cropper = new Cropper(cropperImgRef, cropperOptions);\n\n\n                            //----------------------------------------\n                            // CROPPER TOOLBAR\n                            //----------------------------------------\n                            jDialog.find('.image-editor-toolbar').off(\"click\").on('click', '[data-method]', function () {\n                                var that = jQuery(this);\n                                var data = that.data();\n\n                                var cropped;\n                                var $target;\n                                var result;\n\n                                if (that.prop('disabled') || that.hasClass('disabled')) {\n                                    return;\n                                }\n\n                                if (cropper && data.method) {\n                                    data = jQuery.extend({}, data); // Clone a new one\n\n                                    if (typeof data.target !== 'undefined') {\n                                        $target = jQuery(data.target);\n\n                                        if (typeof data.option === 'undefined') {\n                                            try {\n                                                data.option = JSON.parse($target.val());\n                                            } catch (e) {\n                                                console.log(e.message);\n                                            }\n                                        }\n                                    }\n                                    cropped = cropper.cropped;\n\n\n                                    switch (data.method) {\n                                        case 'rotate':\n                                            if (cropped) {\n                                                cropper.clear();\n                                            }\n\n                                            break;\n                                    }\n\n                                    result = cropper[data.method](data.option, data.secondOption);\n\n                                    switch (data.method) {\n                                        case 'rotate':\n                                            if (cropped) {\n                                                cropper.crop();\n                                            }\n\n                                            break;\n\n                                        case 'scaleX':\n                                        case 'scaleY':\n                                            jQuery(this).data('option', -data.option);\n                                            break;\n                                    }\n                                }\n                            });\n                        }\n\n\n                    }, 1);\n                } else {\n                    /**\n                     * Required when the user first upload a non image, and then uploads an image again\n                     * (otherwise the cropper isn't initialized properly).\n                     */\n                    destroyCropper();\n                }\n            }\n\n\n            //----------------------------------------\n            // DROP ZONE\n            //----------------------------------------\n            if (null === dropZoneHandler) {\n                dropZoneHandler = new DropZoneHandler({\n                    container: jDialog[0],\n                    cssClass: feo.dropzoneOverClass || \"dropzone-hover\",\n                    onDrop: (files) => {\n                        useOriginalImageChecked = false;\n                        originalBlob = null;\n                        onFileEditorFileDropped(uFile, files[0]);\n                    },\n                });\n                dropZoneHandler.start();\n            }\n        } else {\n            destroyCropper();\n            dropZoneHandler = null;\n        }\n    });\n\n\n    //----------------------------------------\n    // FUNCTIONS\n    //----------------------------------------\n    /**\n     * https://select2.org/data-sources/arrays\n     */\n    function _toSelect2Data(tags) {\n        var arr = [];\n        for (var i in tags) {\n            var tag = tags[i];\n            arr.push({\n                \"id\": tag,\n                \"text\": tag,\n            })\n        }\n        return arr;\n    }\n\n    function removeError(e) {\n        e.target.closest(\".file-editor-error\").remove();\n    }\n\n\n    function destroyCropper() {\n        if (null !== cropper) {\n            cropper.destroy();\n        }\n        cropper = null;\n    }\n\n    async function onUpdateBtnClicked() {\n\n\n        let hasBeenCropped = false;\n        if (null !== cropper) {\n            hasBeenCropped = (false === jsx.compareObjects(initialCropData, cropper.getData()));\n        }\n\n\n        await onFileEditorUpdated(uFile, await getFileEditorData(), {\n            cropped: hasBeenCropped,\n            dropped: newDrop,\n            original: useOriginalImageChecked,\n        });\n\n        if (0 === errors.length) {\n            close();\n            useOriginalImageChecked = false; // make sure the user opens his files (and not the original) next time he opens the dialog\n        }\n    }\n\n\n    function close() {\n        originalBlob = null;\n        onCloseFileEditorBtnClicked();\n    }\n\n    async function getFileEditorData() {\n\n\n        let ret = {};\n        let directory;\n\n\n        if (true === feo.useDirectory) {\n            if (true === feo.directoryCanBeUpdated) {\n                directory = jDialog.find(\".input-dirname\").val();\n            } else {\n                directory = feo.directory;\n            }\n            ret.directory = directory;\n        }\n\n\n        ret.name = jDialog.find(\".input-basename\").val() + \".\" + jDialog.find(\".input-extension\").val();\n\n\n        if (true === feo.usePrivacy) {\n            let isPrivate = jsx.toInt(jDialog.find('.input-privacy').prop('checked'));\n            ret.is_private = isPrivate;\n        }\n\n\n        if (true === feo.useTags) {\n            let tags = jDialog.find('.select-tags').val();\n            ret.tags = tags;\n        }\n\n\n        let file = uFile.file;\n        if (null !== cropper) {\n            file = await getFileEditorBlob(cropper);\n        }\n        ret.file = file;\n        return ret;\n    }\n\n    async function getFileEditorBlob(cropper) {\n        return new Promise((resolve, reject) => {\n            cropper.getCroppedCanvas().toBlob((blob) => {\n                resolve(blob);\n            });\n        });\n    }\n\n    async function toggleOriginal(e) {\n\n        destroyCropper();\n\n        if (true === e.target.checked) {\n            useOriginalImageChecked = true;\n            if (null !== uFile.original_url) {\n\n                if (null === originalBlob) {\n\n                    pendingOriginalBlob = true;\n\n\n                    let response = await fetch(uFile.original_url).catch(e => {\n                        addError(\"Server error: \" + e.message);\n                    });\n                    if (true === response.ok) {\n\n                        let blob = await response.blob().catch(e => {\n                            addError(\"Blob error: could not convert the url into a blob (\" + uFile.original_url + \")\");\n                        });\n\n\n                        setTimeout(function () {\n                            originalBlob = blob;\n                            pendingOriginalBlob = false;\n                        }, 1);\n\n\n                    } else {\n                        addError(\"Server error: \" + response.statusText);\n                    }\n                } else {\n                    pendingOriginalBlob = false;\n                    stateCpt++;\n                }\n            }\n        } else {\n            useOriginalImageChecked = false;\n            pendingOriginalBlob = false;\n            stateCpt++;\n        }\n\n    }\n\n    function addError(errMsg) {\n        errors = [...errors, errMsg];\n    }\n\n\n</script>\n\n\n{#if null !== uFile && true === isOpen}\n    <div class=\"overlay\" transition:fade>\n        <MyModal open={isOpen} options={{dragHandle: \".header\"}}>\n            <div class=\"container file-editor-container\" id=\"file-editor-dialog-{cssIdCounter}\">\n\n                <div style=\"display:none\">{stateCpt}</div>\n                <div class=\"header\">\n                    <span class=\"title\">{title}</span>\n                    <span on:click={close} class=\"close-modal-btn far fa-times-circle\"></span>\n                </div>\n\n                <div class=\"body file-editor\">\n\n\n                    <div title=\"File Editor\" class=\"dialog-file-editor\">\n                        <div class=\"file-editor-error-container\">\n                            {#each errors as errMsg}\n                                <div class=\"file-editor-error\">\n                                    <span>{@html errMsg}</span>\n                                    <span on:click={removeError} class=\"btn-close-error\"><i\n                                            class=\"btn-close-error far fa-window-close\"></i></span>\n                                </div>\n                            {/each}\n                        </div>\n\n\n                        <form action=\"\" method=\"post\">\n\n\n                            <div class=\"file-editor-block-1\">\n\n\n                                <div class=\"control-group control-dirname\">\n\n\n                                    {#if true === feo.useDirectory}\n                                        <label for=\"id-fileuploader-dirname-{cssIdCounter}\">Parent dir: </label>\n                                        {#if true === feo.directoryCanBeUpdated}\n                                            <input id=\"id-fileuploader-dirname-{cssIdCounter}\" type=\"text\"\n                                                   name=\"dirname\"\n                                                   value={uFile.directory}\n                                                   class=\"input-dirname\"/>\n                                        {:else}\n                                            <span class=\"element-dirname\">{feo.directory}</span>\n                                        {/if}\n                                    {/if}\n\n                                </div>\n\n\n                                {#if true === feo.usePrivacy}\n                                    <div class=\"control-group control-privacy\">\n                                        <label for=\"id-fileuploader-privacy-{cssIdCounter}\">Is private</label>\n                                        <input id=\"id-fileuploader-privacy-{cssIdCounter}\" type=\"checkbox\"\n                                               name=\"is_private\"\n                                               value=\"1\"\n                                               class=\"input-privacy\"\n                                               checked={jsx.toBool(uFile.is_private)}\n                                        />\n                                    </div>\n                                {/if}\n\n\n                            </div>\n\n\n                            <div class=\"control-group control-filename\">\n\n                                <label for=\"id-fileuploader-filename-{cssIdCounter}\">File name</label>\n\n                                <div class=\"filename-inputs-container\">\n                                    <input id=\"id-fileuploader-filename-{cssIdCounter}\" type=\"text\" name=\"basename\"\n                                           value={jsx.basename(uFile.name, false)}\n                                           class=\"input-basename\"/>\n                                    <input type=\"text\" name=\"extension\" value={jsx.getFileExtension(uFile.name)}\n                                           class=\"input-extension\" disabled={false === feo.fileExtensionCanBeUpdated}/>\n\n                                </div>\n                            </div>\n\n\n                            {#if true === feo.useTags}\n                                <div class=\"control-group control-tags\">\n                                    <label for=\"id-fileuploader-tags-{cssIdCounter}\">Tags</label>\n                                    <select class=\"select-tags\" id=\"id-fileuploader-tags-{cssIdCounter}\" name=\"tags[]\"\n                                            multiple>\n                                        {#each uFile.tags as tag}\n                                            <option value={tag} selected=\"selected\">{tag}</option>\n                                        {/each}\n                                    </select>\n                                </div>\n                            {/if}\n\n\n                            {#if true === feo.useImageEditor && true === isImage}\n                                <div class=\"control-group image-editor-container\">\n                                    <div class=\"image-editor-header\">\n                                        <div>Image Editor</div>\n                                        {#if true === feo.useKeepOriginalImage && null !== uFile.original_url}\n                                            <div class=\"control-original-toggle\">\n                                                <label for=\"id-fileuploader-original-toggle-{cssIdCounter}\">Use original\n                                                    image</label>\n                                                <input id=\"id-fileuploader-original-toggle-{cssIdCounter}\"\n                                                       type=\"checkbox\" value=\"1\"\n                                                       on:change={toggleOriginal}\n                                                       checked={useOriginalImageChecked}\n                                                       class=\"input-original-toggle\"/>\n                                            </div>\n                                        {/if}\n                                    </div>\n\n\n                                    <div class=\"image-editor-body\">\n\n                                        {#if true === uFile.is_loading || true === pendingOriginalBlob}\n                                            <div class=\"left\">\n                                                <div class=\"img-container is-loading\">\n                                                    <div class=\"spinner\">\n                                                        <i class=\"fas fa-cog fa-spin fa-5x\"></i>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        {:else}\n                                            <div class=\"left\">\n\n                                                <div class=\"img-container\">\n                                                    <img\n                                                            class=\"image-original\" src=\"\"\n                                                            alt=\"Canvas for the cropper editor\">\n                                                </div>\n\n\n                                                <div class=\"image-editor-toolbar\">\n                                                    <div class=\"btn-group\">\n                                                        <button type=\"button\" class=\"btn btn-primary\" data-method=\"zoom\"\n                                                                data-option=\"0.1\"\n                                                                title=\"Zoom In\">\n                                                            <span class=\"fa fa-search-plus\"></span>\n                                                        </button>\n                                                        <button type=\"button\" class=\"btn btn-primary\" data-method=\"zoom\"\n                                                                data-option=\"-0.1\"\n                                                                title=\"Zoom Out\">\n                                                            <span class=\"fa fa-search-minus\"></span>\n                                                        </button>\n                                                    </div>\n\n                                                    <div class=\"btn-group\">\n                                                        <button type=\"button\" class=\"btn btn-primary\"\n                                                                data-method=\"rotate\"\n                                                                data-option=\"-45\"\n                                                                title=\"Rotate Left\">\n                                                            <span class=\"fa fa-undo-alt\"></span>\n                                                        </button>\n\n                                                        <button type=\"button\" class=\"btn btn-primary\"\n                                                                data-method=\"rotate\"\n                                                                data-option=\"45\"\n                                                                title=\"Rotate Right\">\n                                                            <span class=\"fa fa-redo-alt\"></span>\n                                                        </button>\n                                                    </div>\n\n                                                    <div class=\"btn-group\">\n                                                        <button type=\"button\" class=\"btn btn-primary\"\n                                                                data-method=\"scaleX\"\n                                                                data-option=\"-1\"\n                                                                title=\"Flip Horizontal\">\n                                                            <span class=\"fa fa-arrows-alt-h\"></span>\n                                                        </button>\n\n                                                        <button type=\"button\" class=\"btn btn-primary\"\n                                                                data-method=\"scaleY\"\n                                                                data-option=\"-1\"\n                                                                title=\"Flip Vertical\">\n                                                            <span class=\"fa fa-arrows-alt-v\"></span>\n                                                        </button>\n                                                    </div>\n\n                                                    <div class=\"btn-group\">\n                                                        <button type=\"button\" class=\"btn btn-primary\"\n                                                                data-method=\"reset\"\n                                                                title=\"Reset\">\n                                                            <span class=\"fa fa-sync-alt\"></span>\n                                                        </button>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                            <div class=\"img-preview-container\">\n                                                <div class=\"img-preview preview-lg\"></div>\n                                            </div>\n                                        {/if}\n                                    </div>\n\n\n                                </div>\n                            {/if}\n                        </form>\n\n\n                        <div class=\"buttons-bar\">\n\n\n                            {#if\n                            true === uFile.is_loading &&\n                            false === (true === feo.useImageEditor && true === isImage)\n                            }\n                                <div class=\"spinner\">\n                                    <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>\n                                </div>\n                            {/if}\n                            <div class=\"progress-bar\" class:show={uFile.progress > 0 && uFile.progress < 100}>\n                                Uploading... {uFile.progress}%\n                            </div>\n                            <button on:click|preventDefault={close} class={styleBtnCancel}>Cancel</button>\n                            <button on:click|preventDefault={onUpdateBtnClicked} class={styleBtnUpdate}>Update</button>\n                        </div>\n\n                    </div>\n\n\n                </div>\n            </div>\n        </MyModal>\n    </div>\n{/if}\n\n\n<style type=\"text/sass\" lang=\"scss\">:global(.file-editor-container.dropzone-hover) {\n  background-color: #f3f7ff !important; }\n\n.overlay {\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: rgba(0, 0, 0, 0.2);\n  z-index: 1000000000; }\n\n.container {\n  min-width: 60%;\n  width: 60%;\n  margin: 0 auto;\n  margin-top: 10px;\n  padding: 10px;\n  border: 1px solid #fafafa;\n  background-color: white; }\n  .container .header {\n    background: #ddd;\n    cursor: move;\n    padding: 6px;\n    display: flex; }\n    .container .header .close-modal-btn {\n      cursor: pointer;\n      margin-left: auto; }\n  .container .file-editor .file-editor-error-container .file-editor-error {\n    color: white;\n    padding: 10px;\n    border: 1px solid #cd0a0a;\n    background: #cd0a0a;\n    margin-bottom: 2px;\n    position: relative; }\n    .container .file-editor .file-editor-error-container .file-editor-error .btn-close-error {\n      position: absolute;\n      top: 3px;\n      right: 4px;\n      cursor: pointer; }\n  .container .file-editor .file-editor-block-1 {\n    display: flex; }\n    .container .file-editor .file-editor-block-1 .control-privacy {\n      margin-left: auto; }\n  .container .file-editor .control-group {\n    margin-bottom: 0px;\n    border-bottom: 1px solid #fdfdfd;\n    padding-bottom: 10px;\n    padding-top: 10px; }\n    .container .file-editor .control-group.control-basename, .container .file-editor .control-group.control-tags {\n      display: flex;\n      align-items: baseline; }\n      .container .file-editor .control-group.control-basename label, .container .file-editor .control-group.control-tags label {\n        margin-right: 5px;\n        white-space: nowrap; }\n    .container .file-editor .control-group.control-tags {\n      align-items: flex-end; }\n    .container .file-editor .control-group.control-dirname {\n      display: flex;\n      flex: 1;\n      align-items: baseline; }\n      .container .file-editor .control-group.control-dirname .input-dirname {\n        flex: 1;\n        margin-right: 10px; }\n      .container .file-editor .control-group.control-dirname .element-dirname {\n        background: #ececec;\n        padding: 5px; }\n    .container .file-editor .control-group .filename-inputs-container {\n      display: flex;\n      width: 100%;\n      box-sizing: border-box; }\n      .container .file-editor .control-group .filename-inputs-container .input-basename, .container .file-editor .control-group .filename-inputs-container .input-filename {\n        flex: 1;\n        margin-top: 7px; }\n      .container .file-editor .control-group .filename-inputs-container .input-extension {\n        width: 50px;\n        margin-top: 7px; }\n    .container .file-editor .control-group.control-tags label {\n      display: block;\n      margin-bottom: 10px; }\n    .container .file-editor .control-group.control-tags .select-tags {\n      display: block;\n      width: 100%; }\n  .container .file-editor .image-editor-container {\n    margin-top: 10px;\n    padding-top: 0px;\n    padding-bottom: 0px; }\n  .container .file-editor .image-editor-header {\n    display: flex; }\n    .container .file-editor .image-editor-header .control-original-toggle {\n      margin-left: auto; }\n  .container .file-editor .image-editor-body {\n    display: flex; }\n    .container .file-editor .image-editor-body .left {\n      flex: 1; }\n  .container .file-editor .img-container {\n    margin-top: 10px;\n    margin-bottom: 0px;\n    max-height: 497px;\n    min-height: 200px; }\n    .container .file-editor .img-container > img {\n      max-width: 100%;\n      max-height: 290px; }\n    .container .file-editor .img-container.is-loading {\n      display: flex;\n      justify-content: center;\n      align-items: center; }\n      .container .file-editor .img-container.is-loading i {\n        color: #a9bcea; }\n  @media (min-width: 768px) {\n    .container .file-editor .img-container {\n      min-height: 300px; } }\n  .container .file-editor .image-editor-toolbar {\n    display: flex;\n    flex-wrap: wrap;\n    background: #d9d9d9;\n    padding: 10px;\n    justify-content: flex-start; }\n    .container .file-editor .image-editor-toolbar button {\n      padding: 6px 4px 4px 4px;\n      border-radius: 7px;\n      border-color: #ececec; }\n  .container .file-editor .img-preview-container {\n    margin-top: 10px;\n    width: 100px;\n    display: flex;\n    justify-content: center; }\n    .container .file-editor .img-preview-container .img-preview {\n      float: left;\n      margin-bottom: .5rem;\n      margin-right: .5rem;\n      border: 1px solid #ccc;\n      overflow: hidden; }\n      .container .file-editor .img-preview-container .img-preview.preview-lg {\n        height: 9rem;\n        width: 16rem; }\n      .container .file-editor .img-preview-container .img-preview > img {\n        max-width: 100%; }\n  @media (min-width: 768px) {\n    .container .file-editor .img-preview-container {\n      width: 250px; } }\n  .container .file-editor .buttons-bar {\n    text-align: right;\n    padding: 20px;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center; }\n    .container .file-editor .buttons-bar button {\n      padding: 10px;\n      font-size: 1.5em;\n      cursor: pointer; }\n    .container .file-editor .buttons-bar .btn-cancel {\n      background: #f4dada; }\n    .container .file-editor .buttons-bar .btn-update {\n      background: #8bf27c; }\n    .container .file-editor .buttons-bar .spinner {\n      margin-right: 10px; }\n      .container .file-editor .buttons-bar .spinner i {\n        color: #8e8e8e; }\n    .container .file-editor .buttons-bar .progress-bar {\n      display: none;\n      font-size: 1.4em;\n      color: #b30f0f;\n      margin-right: 30px;\n      padding: 20px;\n      position: static;\n      overflow: hidden;\n      animation: loadingShimmer 2s linear;\n      animation-iteration-count: infinite;\n      background-color: #fff;\n      background-image: linear-gradient(to right, rgba(0, 0, 0, 0.03) 0, rgba(0, 0, 0, 0.1) 50%, rgba(0, 0, 0, 0.03) 60%) !important;\n      background-size: 1200px 100% !important; }\n      .container .file-editor .buttons-bar .progress-bar.show {\n        display: block; }\n\n@keyframes loadingShimmer {\n  0% {\n    background-position: -1200px 0; }\n  100% {\n    background-position: 1200px 0; } }\n  .container .file-editor .the-submit-button {\n    background: #0064ff;\n    color: white; }\n  .container .file-editor .fileeditor-uploader-progress {\n    display: none;\n    background: transparent;\n    color: #333;\n    border: none;\n    cursor: default !important; }\n    .container .file-editor .fileeditor-uploader-progress:active {\n      background: transparent;\n      color: #333; }\n</style>"
  ],
  "names": [],
  "mappings": "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"
}