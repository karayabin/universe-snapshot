    /**
     * @implementation
     * @inheritDoc
     */
    public function insertUser(array $user, bool $ignoreDuplicate = true, bool $returnRic = false)
    { //microperm

        $errorInfo = null;

        $user = array_replace($this->getDefaultValues(), $user);

        try {

            $lastInsertId = $this->pdoWrapper->insert("user", $user);
            if (false === $returnRic) {
                return $lastInsertId;
            }
            $ric = [
                'id' => $lastInsertId,
            ];
            return $ric;

        } catch (\PDOException $e) {
            $errorInfo = $e->errorInfo;
        } catch (SimplePdoWrapperQueryException $e) {
            $errorInfo = $e->getPrevious()->errorInfo;
        }


        if (null !== $errorInfo) {
            if ('23000' === $errorInfo[0]) {
                if (false === $ignoreDuplicate) {
                    throw $e;
                }

                $query = "select $implodedRicAndAik from `user`";
                $allMarkers = [];
                SimplePdoWrapper::addWhereSubStmt($query, $allMarkers, $user);
                $res = $this->pdoWrapper->fetch($query, $allMarkers);
                if (false === $res) {
                    throw new \LogicException("A duplicate entry has been found, but yet I cannot fetch it, why?");
                }
                if (false === $returnRic) {
                    return $res['id'];
                }
                return [
                    "id" => $res['id'],
                ];
            }
            throw $e;
        }

        return false;
    }