<?php

namespace Ling\CSRFTools;


/**
 * The CSRFProtector class.
 *
 * This class is a singleton.
 *
 */
class CSRFProtector
{

    /**
     * This property holds its own instance.
     * @var CSRFProtector
     */
    private static $inst = null;


    /**
     * This property holds the sessionName for this instance.
     *
     * It's like a namespace containing all tokens generated by this class.
     *
     * You shouldn't change this, as it's unlikely that you would have a session variable named csrf_tools_token.
     * But if you were, you could extend this class and change that sessionName.
     *
     *
     *
     * @var string
     */
    protected $sessionName;


    /**
     * Gets the singleton instance for this class.
     *
     *
     * @return CSRFProtector
     */
    public static function inst()
    {
        if (null === self::$inst) {
            self::$inst = new static();
        }
        return self::$inst;
    }


    /**
     * Builds the CSRFProtector instance.
     * Notice that it's private.
     */
    private function __construct()
    {

        $this->sessionName = "csrf_tools_token";
        $this->startSession();
    }


    /**
     * Creates and returns a CSRF token.
     * You should pass an identifier if you plan to create more than one token per page.
     * Otherwise, if you know for sure that your page will only use one single token, you can leave
     * this argument to null.
     *
     *
     * @param string|null $identifier
     * @return string
     */
    public function createToken(string $identifier = null): string
    {
        if (null === $identifier) {
            $identifier = 'default';
        }

        if (array_key_exists($identifier, $_SESSION[$this->sessionName])) {
            $_SESSION[$this->sessionName][$identifier]['old'] = $_SESSION[$this->sessionName][$identifier]['new'];
        }

        $token = md5(uniqid());
        $_SESSION[$this->sessionName][$identifier]['new'] = $token;
        return $token;
    }


    /**
     * Returns whether the given token is valid.
     *
     * If you created a token using an identifier, you must specify the exact same identifier (as the second argument
     * of this method) in order for the validation to work properly.
     *
     * If the isValid method will be called on the same page as the createToken method (called earlier),
     * then you must set the $validatesOnSamePage argument to true in order for the validation to work properly.
     *
     * By default, the $validatesOnSamePage argument is false, and validates a token which was created on another page.
     *
     *
     *
     * @param string $token
     * @param string|null $identifier
     * @param bool $validatesOnSamePage
     * @return bool
     */
    public function isValid(string $token, string $identifier = null, bool $validatesOnSamePage = false): bool
    {
        if (null === $identifier) {
            $identifier = 'default';
        }


        if (array_key_exists($identifier, $_SESSION[$this->sessionName])) {

            if (false === $validatesOnSamePage) {
                $res = ($token === $_SESSION[$this->sessionName][$identifier]['new']);
            } else {
                $res = ($token === $_SESSION[$this->sessionName][$identifier]['old']);
            }
            $this->createToken($identifier);
            return $res;

        }
        return false;
    }


    //--------------------------------------------
    //
    //--------------------------------------------
    /**
     * Ensures that the php session has started.
     */
    protected function startSession()
    {
        if (session_status() == PHP_SESSION_NONE) {
            session_start();
        }
        if (false === array_key_exists($this->sessionName, $_SESSION)) {
            $_SESSION[$this->sessionName] = [];
        }
    }


    /**
     * Prepares the session data for this class to work properly.
     * @param string $identifier
     */
    protected function prepareByIdentifier(string $identifier)
    {
        if (false === array_key_exists($identifier, $_SESSION[$this->sessionName])) {
            $_SESSION[$this->sessionName][$identifier] = [];
        }
    }
}