settings:
    intro_msg: Entering interactive mode:
    first_step: null
    use_clear: true
    use_history_nav: true
    history_nav_color: lightBlue
    debug: false
    execute_step_color: red
    header: <
        <white:bgLightBlue>-------------------------</white:bgLightBlue>
        <white:bgLightBlue>- Deploy Interactive mode</white:bgLightBlue>
        <white:bgLightBlue>-------------------------</white:bgLightBlue>
    >
    execute_after_mode: step:choose_action
    execute_after_mode: last
    ask_back: __back__



variables: []


steps:


    # --------------------------------------
    # MAIN
    # --------------------------------------
    choose_project:
        msg: Choose a project:
        dynamic_choices: Ling\Deploy\Helper\EasyConsoleMenuHelper::getProjectsList()
        store_as: project
        goto: choose_action

    choose_action:
        msg: Project <b>${project}</b> - Choose an action:
        choices:
            -
                msg: Files...
                goto: files_choice
            -
                msg: Databases...
                goto: databases_choice
            -
                msg: Configuration...
                execute: conf

    files_choice:
        msg: Project <b>${project}</b> - Files - Select an action:
        choices:
            -
                msg: Push files
                goto: push_file_zip_option
            -
                msg: Fetch files
                goto: fetch_file_zip_option
            -
                msg: Create a backup of the files
                goto: backup_files
            -
                msg: List files backups
                goto: list_backup_files
            -
                msg: Restore files backup
                goto: restore_backup_files
            -
                msg: Clean files backups
                goto: clean_backup_files
            -
                msg: Show diff
                goto: show_diff
            -
                msg: Show map
                goto: show_map


    # --------------------------------------
    # FILES
    # --------------------------------------
    push_file_zip_option:
        msg: Project <b>${project}</b> - Push files - Select a transfer mode:
        choices:
            -
                msg: Using zip (faster)
                execute: push_file_with_zip
            -
                msg: Without zip (slower, but file details)
                execute: push_file_without_zip

    fetch_file_zip_option:
        msg: Project <b>${project}</b> - Fetch files - Select a transfer mode:
        choices:
            -
                msg: Using zip (faster)
                execute: fetch_file_with_zip
            -
                msg: Without zip (slower, but file details)
                execute: fetch_file_without_zip

    backup_files:
        msg: Project <b>${project}</b> - Backup files - Choose local/remote:
        choices:
            -
                msg: Locally
                goto: backup_files_local
            -
                msg: Remotely
                goto: backup_files_remote


    backup_files_local:
        msg: Project <b>${project}</b> - Backup local files - Choose backup name:
        ask: Choose the name of the backup (leave empty for a non-named backup)?
        store_as: backup_name
        execute: backup_files_local

    backup_files_remote:
        msg: Project <b>${project}</b> - Backup remote files - Choose backup name:
        ask: Choose the name of the backup (leave empty for a non-named backup)?
        store_as: backup_name
        execute: backup_files_remote


    list_backup_files:
        msg: Project <b>${project}</b> - List files backups - Choose local/remote:
        choices:
            -
                msg: Locally
                execute: list_backup_files_local
            -
                msg: Remotely
                execute: list_backup_files_remote


    restore_backup_files:
        msg: Project <b>${project}</b> - Restore files backup - Choose local/remote:
        choices:
            -
                msg: Locally
                goto: restore_backup_files_local
            -
                msg: Remotely
                goto: restore_backup_files_remote


    restore_backup_files_local:
        msg: Project <b>${project}</b> - Restore local files backup - Choose the backup:
        ask: Name of the backup (leave empty to use the last non-named backup)?
        store_as: backup_name
        execute: restore_backup_files_local


    restore_backup_files_remote:
        msg: Project <b>${project}</b> - Restore remote files backup - Choose the backup:
        ask: Name of the backup (leave empty to use the last non-named backup)?
        store_as: backup_name
        execute: restore_backup_files_remote

    clean_backup_files:
        msg: Project <b>${project}</b> - Clean files - Choose local/remote:
        choices:
            -
                msg: Locally...
                goto: clean_backup_files_local
            -
                msg: Remotely
                goto: clean_backup_files_remote

    clean_backup_files_local:
        msg: Project <b>${project}</b> - Clean local backup files - Choose a method:
        choices:
            -
                msg: Delete all non-named backup files but the <b>x</b> most recent...
                goto: clean_backup_files_local_keep
            -
                msg: Delete a backup file by its name
                goto: clean_backup_files_local_name


    clean_backup_files_local_keep:
        msg: Project <b>${project}</b> - Clean local backup files with keep option:
        ask: How many non-named backup files do you want to keep?
        store_as: keep_number
        execute: clean_backup_files_local_keep


    clean_backup_files_local_name:
        msg: Project <b>${project}</b> - Clean a local backup files by name:
        ask: Name (or comma separated names) of the local backup(s) to delete?
        ask_validation: not_empty
        store_as: backup_name
        execute: clean_backup_files_local_name


    clean_backup_files_remote:
        msg: Project <b>${project}</b> - Clean remote backup files - Choose a method:
        choices:
            -
                msg: Delete all non-named backup files but the <b>x</b> most recent...
                goto: clean_backup_files_remote_keep
            -
                msg: Delete a backup file by its name
                goto: clean_backup_files_remote_name


    clean_backup_files_remote_keep:
        msg: Project <b>${project}</b> - Clean remote backup files with keep option:
        ask: How many non-named backup files do you want to keep?
        store_as: keep_number
        execute: clean_backup_files_remote_keep


    clean_backup_files_remote_name:
        msg: Project <b>${project}</b> - Clean a remote backup files by name:
        ask: Name (or comma separated names) of the remote backup(s) to delete?
        ask_validation: not_empty
        store_as: backup_name
        execute: clean_backup_files_remote_name

    show_diff:
        msg:  Project <b>${project}</b> - Show diff - Choose local/remote:
        choices:
            -
                msg: Show local diff (to turn the remote into a mirror of the local site)
                execute: show_diff_local
            -
                msg: Show remote diff (to turn the local site into a mirror of the remote)
                execute: show_diff_remote

    show_map:
        msg:  Project <b>${project}</b> - Show map - Choose local/remote:
        choices:
            -
                msg: Show local map
                execute: show_map_local
            -
                msg: Show remote map
                execute: show_map_remote


    # --------------------------------------
    # DATABASES
    # --------------------------------------
    databases_choice:
        msg: Project <b>${project}</b> - Databases - Select an action:
        choices:
            -
                msg: Create the databases
                goto: create_database
            -
                msg: Drop the databases
                goto: drop_database
            -
                msg: Push the databases
                execute: push_database
            -
                msg: Fetch the databases
                execute: fetch_database
            -
                msg: Create a backup of the databases
                goto: backup_database
            -
                msg: List the databases backups
                goto: list_backup_db
            -
                msg: Restore a database backup
                goto: restore_backup_db
            -
                msg: Remove database backups
                goto: clean_backup_db

    create_database:
        msg: Project <b>${project}</b> - Databases - Create the databases - Choose local/remote:
        choices:
            -
                msg: Locally
                execute: create_db_local
            -
                msg: Remotely
                execute: create_db_remote
    drop_database:
        msg: Project <b>${project}</b> - Databases - Drop the databases - Choose local/remote:
        choices:
            -
                msg: Locally
                execute: drop_db_local
            -
                msg: Remotely
                execute: drop_db_remote
    backup_database:
        msg: Project <b>${project}</b> - Databases - Create a backup - Choose local/remote:
        choices:
            -
                msg: Locally
                goto: backup_database_local
            -
                msg: Remotely
                goto: backup_database_remote


    backup_database_local:
        msg: Project <b>${project}</b> - Databases - Create a local backup - Choose the name:
        ask: Choose the name of the local backup (leave empty for a non-named backup)?
        store_as: backup_name
        execute: backup_db_local

    backup_database_remote:
        msg: Project <b>${project}</b> - Databases - Create a remote backup - Choose the name:
        ask: Choose the name of the remote backup (leave empty for a non-named backup)?
        store_as: backup_name
        execute: backup_db_remote

    list_backup_db:
        msg: Project <b>${project}</b> - Databases - List the databases backups - Choose local/remote:
        choices:
            -
                msg: Locally
                execute: list_backup_db_local
            -
                msg: Remotely
                execute: list_backup_db_remote

    restore_backup_db:
        msg: Project <b>${project}</b> - Restore databases backups - Choose local/remote:
        choices:
            -
                msg: Locally
                goto: restore_backup_db_local
            -
                msg: Remotely
                goto: restore_backup_db_remote


    restore_backup_db_local:
        msg: Project <b>${project}</b> - Restore local databases backup(s) - Choose the backup name:
        ask: Name of the backup (leave empty to use the last non-named backup)?
        store_as: backup_name
        execute: restore_backup_db_local


    restore_backup_db_remote:
        msg: Project <b>${project}</b> - Restore remote databases backup(s) - Choose the backup name:
        ask: Name of the backup (leave empty to use the last non-named backup)?
        store_as: backup_name
        execute: restore_backup_db_remote

    clean_backup_db:
        msg: Project <b>${project}</b> - Remove database backup(s) - Choose local/remote:
        choices:
            -
                msg: Locally
                goto: clean_backup_db_local
            -
                msg: Remotely
                goto: clean_backup_db_remote

    clean_backup_db_local:
        msg: Project <b>${project}</b> - Remove a local database backup:
        ask: Name (or comma separated names) of the local backup(s) to delete?
        ask_validation: not_empty
        store_as: backup_name
        execute: clean_backup_db_local

    clean_backup_db_remote:
        msg: Project <b>${project}</b> - Remove a remote database backup:
        ask: Name (or comma separated names) of the remote backup(s) to delete?
        ask_validation: not_empty
        store_as: backup_name
        execute: clean_backup_db_remote



commands:
    # --------------------------------------
    # FILES
    # --------------------------------------
    push_file_with_zip:
        cmd: deploy p="${project}" push -z
    push_file_without_zip:
        cmd: deploy p="${project}" push
    fetch_file_with_zip:
        cmd: deploy p="${project}" fetch -z
    fetch_file_without_zip:
        cmd: deploy p="${project}" fetch
    backup_files_local:
        cmd_backup_name: deploy p="${project}" backup-files name="${backup_name}"
        cmd: deploy p="${project}" backup-files
    backup_files_remote:
        cmd_backup_name: deploy p="${project}" backup-files name="${backup_name}" -r
        cmd: deploy p="${project}" backup-files -r
    list_backup_files_local:
        cmd: deploy p="${project}" list-backup-files
    list_backup_files_remote:
        cmd: deploy p="${project}" list-backup-files -r
    restore_backup_files_local:
        cmd: deploy p="${project}" restore-backup-files
        cmd_backup_name: deploy p="${project}" restore-backup-files name=${backup_name}
    restore_backup_files_remote:
        cmd: deploy p="${project}" restore-backup-files -r
        cmd_backup_name: deploy p="${project}" restore-backup-files name=${backup_name} -r
    clean_backup_files_local_keep:
        cmd: deploy p="${project}" clean-backup-files keep=${keep_number}
    clean_backup_files_local_name:
        cmd: deploy p="${project}" clean-backup-files names=${backup_name}
    clean_backup_files_remote_keep:
        cmd: deploy p="${project}" clean-backup-files keep=${keep_number} -r
    clean_backup_files_remote_name:
        cmd: deploy p="${project}" clean-backup-files names=${backup_name} -r
    show_diff_local:
        cmd: deploy p="${project}" diff
    show_diff_remote:
        cmd: deploy p="${project}" diffback
    show_map_local:
        cmd: deploy p="${project}" map -d
    show_map_remote:
        cmd: deploy p="${project}" map -dr
    # --------------------------------------
    # DATABASES
    # --------------------------------------
    create_db_remote:
        cmd: deploy p="${project}" create-db -rf
    create_db_local:
        cmd: deploy p="${project}" create-db -f
    drop_db_local:
        cmd: deploy p="${project}" drop-db
    drop_db_remote:
        cmd: deploy p="${project}" drop-db -rp-db
    push_database:
        cmd: deploy p="${project}" push-db
    fetch_database:
        cmd: deploy p="${project}" fetch-db
    backup_db_local:
        cmd: deploy p="${project}" backup-db
        cmd_backup_name: deploy p="${project}" backup-db name=${backup_name}
    backup_db_remote:
        cmd: deploy p="${project}" backup-db -r
        cmd_backup_name: deploy p="${project}" backup-db name=${backup_name} -r
    list_backup_db_local:
        cmd: deploy p="${project}" list-backup-db
    list_backup_db_remote:
        cmd: deploy p="${project}" list-backup-db -r
    restore_backup_db_local:
        cmd: deploy p="${project}" restore-backup-db
        cmd_backup_name: deploy p="${project}" restore-backup-db name=${backup_name}
    restore_backup_db_remote:
        cmd: deploy p="${project}" restore-backup-db -r
        cmd_backup_name: deploy p="${project}" restore-backup-db name=${backup_name} -r
    clean_backup_db_local:
        cmd: deploy p="${project}" clean-backup-db
        cmd_backup_name: deploy p="${project}" clean-backup-db names=${backup_name}
    clean_backup_db_remote:
        cmd: deploy p="${project}" clean-backup-db -r
        cmd_backup_name: deploy p="${project}" clean-backup-db names=${backup_name} -r
    conf:
        cmd: deploy conf