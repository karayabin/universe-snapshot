https://zaiste.net/a_few_ways_to_execute_commands_remotely_using_ssh/

https://www.cyberciti.biz/faq/linux-unix-osx-bsd-ssh-run-command-on-remote-machine-server/

cat remote-box-commands.bash | ssh -t vivek@nas02nixcrafthomeserver

Please note that the -t option will get rid of “Sorry, you must have a tty to run sudo/insert your-command-here” error message.





Remote sql and security
======================

With mysql root password, typing the password manually
------------------

ssh -t kom test/script.sh

```sql
#test/script.sh:
mysql -uroot -p < commands.sql
```


With non-root databases passwords
------------------------------

TODO: blabla












General concepts
==================

Site and remote
-----------------

The **site** represents the machine onto which the application was primarily developed or is currently developed.
It's usually a developer machine.


The **remote** represents a machine where the application will be deployed to.
It's usually a production machine.



Structure of the deploy directory
----------------

The deploy directory is named **.deploy** and is found at the root of the application.
It's created by some commands if necessary.


An application using deploy looks like this (for instance):

```txt
- /path/to/myapp/
----- .deploy/
--------- backup-files/     # contains the backup files created by the backup-files command
--------- backup-all/       # contains the backup files created by the backup-all command
--------- backup-db/        # contains the backup files created by the backup-db command
--------- map.txt           # contains the files map created by the map command
--------- conf.byml         # the configuration file
----- ...application files
````



Hash id
---------
The hash id is just an identifier associated with a file, based on its content.
The hash id is used to know whether a file has changed or not.

Currently, the hash_id is:
- the result of a php hash_file function if the filesize is lower or equal to 1000000 bytes.
- the result of the filesize function if the filesize is greater than 1000000 bytes.


For textual files, we use the php hash_file function.
For medias however, the file size gets pretty big rapidly and the computation time is quite expensive.

Here is the results of some tests I observed:

Type of file    |     filesize (bytes)       |  estimated time for hash_file
-----------------|----------------------------|-----------
php class of 2000 lines     |     51 296     | instant
jpg photo     |     7 698 593               | instant, but a tad bit slower
1h30 mp4 movie      |     2 114 726 113     | 10 seconds


As we can guess, the bigger the file, the longer it takes for the hash_file to do its job.
However, we want quick results because we are need to compare two maps and make a diff (just for starters),
all over ssh.
And so having a single file take 10s of time is not an option.


Therefore, I establish this simple rule (which might change as the project matures):

- if the filesize is more than 1 000 000, the hash id is the file size, otherwise it's the result of
the hash_file function.

The trade off is that hash_file is reliable for comparing content, while the filesize is not, but
if the file weights more than 1 000 000 bytes, it's probably harder to get a different file with exactly
the same weight.

And further more, as far as I'm concerned, I rarely go over 1000 lines of codes.










Global options
---------

Those options apply to all commands.

- site: defines the name of the **base site** (aka current site) to use.
        If not set, the base site is guessed from the current directory (by comparing the current dir with the root dir of each site).
        Note: all commands require that the **base site** is defined in the conf. If the **base site** is not defined, then the command aborts.



Commands
-----------


create-db (remote=$remote)? (database=$database)?
    Creates databases for the **site**, or the **remote** if the **remote** option is passed.
    The databases to be created are defined in the **sites.$siteName.databases** section of the configuration file.
    See the configuration file for more info.

    If the **database** option is defined, then only the given $database will be created.


sync-all remote=$remote (database=$database)?
    A shortcut to execute the following commands:
        - sync-db
        - sync-files
    Options and flags are passed to both the **sync-db** and the **sync-files** commands.



sync-db remote=$remote (database=$database)?
    Clones the databases from the current **site** to the **remote**.

    The databases to clone are defined in the **sites.$siteName.databases** section in the **configuration file**.
    If the **database** option is set, then only the given $database will be synced.

    The behaviour of this command is configured by the **sync-db-conf** key.
    See the documentation for the configuration file for more details.


sync-db-reverse remote=$remote (database=$database)?
    Clones the databases from the **remote** to the **site**.

    The databases to clone are defined in the **sites.$siteName.databases** section in the **configuration file**.
    If the **database** option is set, then only the given $database will be synced.

    The behaviour of this command is configured by the **sync-db-reverse-conf** key.
    See the documentation for the configuration file for more details.



sync-files (site=$default_site)? remote=$remote
    Clone the applications files from the **site** to the **remote**.

    Note: files will be removed/created from the **remote** if necessary.

    The behaviour of this command is configured by the **sync-files-conf** key.
    See the documentation for the configuration file for more details.


sync-files-reverse (site=$default_site)? remote=$remote
    Clones the applications files, from the **remote** to the **site**.

    Note: files will be removed/created from the **site** if necessary.

    The behaviour of this command is configured by the **sync-files-reverse-conf** key.
    See the documentation for the configuration file for more details.






backup-files (remote=$remote)? (name=$backupName)?

    Creates a backup of the application files for the **site**, or for the **remote** (if the **remote** option is passed).

    Backups are created by default under the **.deploy/backup-files** directory at the root of the **site** or **remote** application.

    If the **name** option is defined, it defines the name of the backup directory.
    Otherwise, a default name is chosen automatically by the command (usually a datetime).

    The behaviour of this command is configured by the **backup-files-conf** key.
    See the documentation for the configuration file for more details.




backup-db (remote=$remote)? (name=$backupName)? (database=$database)?

    Same as the **backup-files** command, but backs up the databases in the **.deploy/backup-db** instead.
    If the **database** option is set, only this database will be backed up.

     The behaviour of this command is configured by the **backup-db-conf** key.
     See the documentation for the configuration file for more details.


backup-all
    BLABLA
    Same as backup-db + backup-files



backup-files-list (remote=$remote)

    Displays the list of backup names for the backup-files of the **site**, or of the **remote** (if the **remote** option is set).



backup-db-list
    IDEM BLABLA


backup-all-list
    IDEM BLABLA



restore-files (backup=$backupName)? (remote=$remote)?
    Restore the application files of the **site** from the last backup.

    If the **remote** option is set, restore the application of the given **remote** instead.

    If the **backup** option is set, restore the given backup instead.






restore-db
    IDEM BLABLA
restore-all
    IDEM BLABLA

/**
TODO HERE
*/

showconf
    Displays the configuration file

openconf
    Opens the configuration file
    vim|open|$EDITOR???

map
    Creates the map for the files of the site or remote.
    The map is the list of the files in the application, along with their hash id.
    See hash id definition for more details.



diff-files remote=$remote
    Internal command to show the differences between the **site** map and the **remote** map.
    Those differences are used to know which files to create/remove in a sync-files operation.


diff-db remote=$remote
    same as diff-files, but for database...



info (remote=$remote)?
    various info about the site or remote:
    - list of all backup names




The configuration file
-------

The configuration file is defined only on the machine containing the site.
It is not copied to the remote machines.


Below is an example configuration file.


```yaml

default_site: my_site


# Applies by default to all sites.
# Can be overridden on a per site/remote basis
general_conf:
    backup-files-conf:
        use_zip: 1
    sync-db-conf:
        # Creates a backup of the remote database (on the remote machine) before it's replaced by the site database
        backup_remote: 1


sites:
    my_site:
        root_dir: /path/to/myapp
        databases:
            my_db:
                type: mysql
                password: pueofjA1,kD
                ?remote_password: if not set same as (local) password
        sync-files-conf:
            not_uploaded: (to the remote) A list of entries to not remove from the remote.
            not_removed: (from the remote) A list of entries to not upload to the remote.


        remotes:
            komin:
                ssh_config_id: kom
                root_dir: /home/me/myapp

```


### Note about the configuration of commands

The configuration of a command is usually an array stored under a key named after the command: **$command-conf**.
For instance the configuration key for the command **sync-files** is **sync-files-conf**.

The configuration of the command can be at multiple locations at the same time:

- general_conf                  (general)
- sites.$siteName               (site)
- sites.remotes.$remoteName     (remote)

The "general" configuration is the default configuration which can be merged/overridden by either the site configuration (by default),
or by the remote configuration when appropriate (specified in the command help when this is the case).




