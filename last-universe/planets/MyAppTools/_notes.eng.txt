



Application
--------------

This is the main object representing the application.
You can use it to exchange values between the differents parts of your application.





User
--------

Represents a connected user.
It has to be created once when the human user logs in.
It is destroyed when the human user logs out.



TurtleApplicationEngine
---------------------------

TurtleApp engine is a simple application engine that can handle a few things for you, with little configuration.
TurtleApp is simple and doesn't use services container.
TurtleApp uses the Uri2Page router and a simple caching system.
If an exception is caught, it can log it to a log file and send you an email.

If you use TurtleApp engine, then you create php pages and map the uris to the php pages.





The simplicity of use comes with a price to pay: you have to accept and 
use the turtle conventions, described below.


### Turtle conventions

You are responsible for providing the behaviour when

- the safePage is searched 
- a page is not found
- an exception is caught by the turtle app engine


It is expected that you configure:
 
- the cache dir 
- the pages dir



Application variables:

- safePage: the page (Uri2PageRouter) that matched the router
- noCache: do not use the cache (false by default)  



Here is an example that one can use in development.
If you want to use this in prod, you will have to be more careful about the handling of errors.


```php
<?php


// init the app
use MyAppTools\Application\MyApp;
use MyAppTools\ApplicationEngine\TurtleApplicationEngine;


require_once __DIR__ . "/../init.php";




MyApp::inst()->set('noCache', true);


TurtleApplicationEngine::inst()
    ->setCacheDir(__DIR__ . "/../cache")
    ->setPagesDir(__DIR__ . "/../pages")
    ->setOnPageRequestedCb(function () {
        return MyApp::inst()->getRouter()->listen();
    })
    ->setOnExceptionCaughtCb(function (\Exception $e, $bufferedData) {
        if (false === IS_LOCAL) {
            $msg = '[Exception]: ' . $e->getMessage() . PHP_EOL;
            $msg .= $e->getTraceAsString();
            $msg .= ' {browserInfo}';
            sendMailTo($msg);
            appLog($msg);

            echo $bufferedData;
        }
        else {
            throw $e;
        }
    })
    ->setOnPageNotFoundCb(function () {
        // should provide a default template I guess
        az("page not found: " . $_SERVER['REQUEST_URI']);
    })
    ->setOnSafePageNotFoundCb(function ($safePage, $file) {
        // should never happen
        throw new \LogicException("safe page not found: $safePage"); // Note: this exception will be caught by our onException callback

    })
    ->start();
```

